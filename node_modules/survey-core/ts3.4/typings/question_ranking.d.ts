import { ISurveyImpl } from "./base-interfaces";
import { DragDropRankingChoices } from "./dragdrop/ranking-choices";
import { ItemValue } from "./itemvalue";
import { QuestionCheckboxModel } from "./question_checkbox";
/**
 * A class that describes the Ranking question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-ranking/ (linkStyle))
 */
export declare class QuestionRankingModel extends QuestionCheckboxModel {
    private domNode;
    constructor(name: string);
    protected getDefaultItemComponent(): string;
    getType(): string;
    getItemTabIndex(item: ItemValue): number;
    readonly rootClass: string;
    protected getItemClassCore(item: ItemValue, options: any): string;
    protected isItemCurrentDropTarget(item: ItemValue): boolean;
    readonly ghostPositionCssClass: string;
    getItemIndexClasses(): string;
    getNumberByIndex(index: number): string;
    setSurveyImpl(value: ISurveyImpl, isLight?: boolean): void;
    isAnswerCorrect(): boolean;
    onSurveyValueChanged(newValue: any): void;
    protected onVisibleChoicesChanged: () => void;
    localeChanged: () => void;
    private addToValueByVisibleChoices;
    private removeFromValueByVisibleChoices;
    readonly rankingChoices: Array<ItemValue>;
    private updateRankingChoices;
    dragDropRankingChoices: DragDropRankingChoices;
    currentDropTarget: ItemValue;
    dropTargetNodeMove: string;
    endLoadingFromJson(): void;
    handlePointerDown: (event: PointerEvent, choice: ItemValue, node: HTMLElement) => void;
    private isDragStartNodeValid;
    private readonly allowStartDrag: any;
    afterRenderQuestionElement(el: HTMLElement): void;
    beforeDestroyQuestionElement(el: HTMLElement): void;
    handleKeydown: (event: KeyboardEvent, choice: ItemValue) => void;
    protected supportSelectAll(): boolean;
    supportOther(): boolean;
    supportNone(): boolean;
    private handleArrowUp;
    private handleArrowDown;
    private focusItem;
    setValue: () => void;
    getIconHoverCss(): string;
    getIconFocusCss(): string;
    /*
    * Specifies whether to use a long tap (press and hold) gesture to start dragging.
    *
    * Default value: `true`
    *
    * Disable this property if you want to start dragging when users perform a scroll gesture.
    */
    longTap: boolean;
    useFullItemSizeForShortcut: boolean;
}
