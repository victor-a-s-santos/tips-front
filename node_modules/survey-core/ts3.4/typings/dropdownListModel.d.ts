import { IAction } from "./actions/action";
import { Base } from "./base";
import { ItemValue } from "./itemvalue";
import { ListModel } from "./list";
import { PopupModel } from "./popup";
import { Question } from "./question";
export declare class DropdownListModel extends Base {
    protected question: Question;
    protected onSelectionChanged?: (item: IAction, ...params: any[]) => void;
    readonly minPageSize = 25;
    readonly loadingItemHeight = 40;
    private _markdownMode;
    private _popupModel;
    private readonly focusFirstInputSelector: any;
    protected readonly selectedItemSelector = ".sv-list__item--selected";
    protected readonly itemSelector = ".sv-list__item";
    protected getFocusFirstInputSelector(): string;
    private itemsSettings;
    private isRunningLoadQuestionChoices;
    protected listModel: ListModel<ItemValue>;
    protected popupCssClasses: string;
    private resetItemsSettings;
    private setItems;
    private updateQuestionChoices;
    private updatePopupFocusFirstInputSelector;
    protected createPopup(): void;
    private setFilterStringToListModel;
    protected popupRecalculatePosition(isResetHeight: boolean): void;
    protected onHidePopup(): void;
    protected getAvailableItems(): Array<ItemValue>;
    protected createListModel(): ListModel<ItemValue>;
    protected updateAfterListModelCreated(model: ListModel<ItemValue>): void;
    updateCssClasses(popupCssClass: string, listCssClasses: any): void;
    protected resetFilterString(): void;
    protected onSetFilterString(): void;
    searchEnabled: boolean;
    filterString: string;
    inputString: string;
    showSelectedItemLocText: boolean;
    showInputFieldComponent: boolean;
    ariaActivedescendant: string;
    private applyInputString;
    private applyHintString;
    inputStringRendered: string;
    readonly placeholderRendered: any;
    readonly listElementId: string;
    hasScroll: boolean;
    hintString: string;
    private readonly hintStringLC: any;
    private readonly inputStringLC: any;
    readonly showHintPrefix: boolean;
    readonly hintStringPrefix: string;
    readonly showHintString: boolean;
    readonly hintStringSuffix: string;
    constructor(question: Question, onSelectionChanged?: (item: IAction, ...params: any[]) => void);
    readonly popupModel: PopupModel;
    readonly inputReadOnly: boolean;
    readonly filterStringEnabled: boolean;
    readonly inputMode: "none" | "text";
    setSearchEnabled(newValue: boolean): void;
    updateItems(): void;
    onClick(event: any): void;
    onClear(event: any): void;
    getSelectedAction(): ItemValue;
    changeSelectionWithKeyboard(reverse: boolean): void;
    keyHandler(event: any): void;
    onScroll(event: Event): void;
    onBlur(event: any): void;
    onFocus(event: any): void;
    setInputStringFromSelectedItem(newValue?: any): void;
    dispose(): void;
    scrollToFocusedItem(): void;
}
