import { Question } from "./question";
import { EventBase } from "./base";
import { SurveyError } from "./survey-error";
import { ActionContainer } from "./actions/container";
import { Action } from "./actions/action";
/**
 * A class that describes the File question type.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
 */
export declare class QuestionFileModel extends Question {
    private isUploading;
    isDragging: boolean;
    /**
     * An event that is raised after the upload state has changed.
     *
     * Parameters:
     *
     * - `sender`: `SurveyModel`\
     * A survey instance that raised the event.
     * - `options.state`: `String`\
     * The current upload state: `"empty"`, `"loading"`, `"loaded"`, or `"error"`.
     */
    onUploadStateChanged: EventBase<QuestionFileModel>;
    onStateChanged: EventBase<QuestionFileModel>;
    previewValue: any[];
    currentState: string;
    indexToShow: number;
    containsMultiplyFiles: boolean;
    mobileFileNavigator: ActionContainer;
    protected prevFileAction: Action;
    protected nextFileAction: Action;
    protected fileIndexAction: Action;
    readonly mobileFileNavigatorVisible: boolean;
    constructor(name: string);
    protected updateElementCssCore(cssClasses: any): void;
    private getFileIndexCaption;
    isPreviewVisible(index: number): boolean;
    getType(): string;
    clearOnDeletingContainer(): void;
    /*
    * Disable this property only to implement a custom preview.
    *
    * [View Demo](https://surveyjs.io/form-library/examples/file-custom-preview/ (linkStyle))
    * @see allowImagesPreview
    */
    showPreview: boolean;
    /*
    * Specifies whether users can upload multiple files.
    *
    * Default value: `false`
    */
    allowMultiple: boolean;
    /*
    * The image height.
    */
    imageHeight: string;
    /*
    * The image width.
    */
    imageWidth: string;
    /*
    * An [accept](https://www.w3schools.com/tags/att_input_accept.asp) attribute value for the underlying `<input>` element.
    */
    acceptedTypes: string;
    /*
    * Specifies whether to store file content as text in `SurveyModel`'s [`data`](https://surveyjs.io/form-library/documentation/surveymodel#data) property.
    *
    * If you disable this property, implement `SurveyModel`'s [`onUploadFiles`](https://surveyjs.io/form-library/documentation/surveymodel#onUploadFiles) event handler to specify how to store file content.
    */
    storeDataAsText: boolean;
    /*
    * Enable this property if you want to wait until files are uploaded to complete the survey.
    *
    * Default value: `false`
    */
    waitForUpload: boolean;
    /*
    * Specifies whether to show a preview of image files.
    */
    allowImagesPreview: boolean;
    /*
    * Maximum allowed file size, measured in bytes.
    *
    * Default value: 0 (unlimited)
    */
    maxSize: number;
    /*
    * Specifies whether users should confirm file deletion.
    *
    * Default value: `false`
    */
    needConfirmRemoveFile: boolean;
    getConfirmRemoveMessage(fileName: string): string;
    confirmRemoveMessage: string;
    confirmRemoveAllMessage: string;
    noFileChosenCaption: string;
    chooseButtonCaption: string;
    clearButtonCaption: string;
    removeFileCaption: string;
    loadingFileTitle: string;
    chooseFileTitle: string;
    dragAreaPlaceholder: string;
    readonly inputTitle: string;
    clear(doneCallback?: () => void): void;
    readonly multipleRendered: string;
    readonly showRemoveButton: any;
    readonly showRemoveButtonBottom: any;
    defaultImage(data: any): boolean;
    /**
     * Removes a file with a specified name.
     */
    removeFile(name: string): void;
    protected removeFileByContent(content: any): void;
    /**
     * Loads multiple files into the question.
     * @param files An array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects.
     */
    loadFiles(files: File[]): void;
    canPreviewImage(fileItem: any): boolean;
    protected loadPreview(newValue: any): void;
    protected onCheckForErrors(errors: Array<SurveyError>, isOnValueChanged: boolean): void;
    protected stateChanged(state: string): void;
    private allFilesOk;
    private isFileImage;
    getPlainData(options?: {
        includeEmpty?: boolean;
        calculations?: Array<{
            propertyName: string;
        }>;
    }): import("./question").IQuestionPlainData;
    getChooseFileCss(): string;
    getReadOnlyFileCss(): string;
    readonly fileRootCss: string;
    getFileDecoratorCss(): string;
    private onChange;
    protected onChangeQuestionValue(newValue: any): void;
    endLoadingFromJson(): void;
    private rootElement;
    afterRender(el: HTMLElement): void;
    private dragCounter;
    onDragEnter: (event: any) => void;
    onDragOver: (event: any) => boolean;
    onDrop: (event: any) => void;
    onDragLeave: (event: any) => void;
    doChange: (event: any) => void;
    doClean: (event: any) => void;
    doRemoveFile(data: any): void;
    doDownloadFile: (event: any, data: any) => void;
}
export declare class FileLoader {
    private fileQuestion;
    private callback;
    constructor(fileQuestion: QuestionFileModel, callback: (status: string, files: any[]) => void);
    loaded: any[];
    load(files: Array<any>): void;
    dispose(): void;
}
