import { JsonError } from "./jsonobject";
import { Base, EventBase } from "./base";
import { ISurvey, ISurveyData, ISurveyImpl, ITextProcessor, IQuestion, IPanel, IElement, IPage, ISurveyErrorOwner, ISurveyElement, IProgressInfo, IFindElement, ISurveyLayoutElement, LayoutElementContainer } from "./base-interfaces";
import { SurveyElementCore } from "./survey-element";
import { ISurveyTriggerOwner, SurveyTrigger, Trigger } from "./trigger";
import { CalculatedValue } from "./calculatedValue";
import { PageModel } from "./page";
import { dxSurveyService } from "./dxSurveyService";
import { LocalizableString } from "./localizablestring";
import { SurveyTimerModel, ISurveyTimerText } from "./surveyTimerModel";
import { IQuestionPlainData, Question } from "./question";
import { QuestionSelectBase } from "./question_baseselect";
import { ItemValue } from "./itemvalue";
import { PanelModel, QuestionRowModel } from "./panel";
import { HtmlConditionItem, UrlConditionItem } from "./expressionItems";
import { SurveyError } from "./survey-error";
import { IAction, Action } from "./actions/action";
import { ActionContainer } from "./actions/container";
import { QuestionPanelDynamicModel } from "./question_paneldynamic";
import { Notifier } from "./notifier";
import { TriggerExecutedEvent, CompletingEvent, CompleteEvent, ShowingPreviewEvent, NavigateToUrlEvent, CurrentPageChangingEvent, CurrentPageChangedEvent, ValueChangingEvent, ValueChangedEvent, VariableChangedEvent, QuestionVisibleChangedEvent, PageVisibleChangedEvent, PanelVisibleChangedEvent, QuestionCreatedEvent, QuestionAddedEvent, QuestionRemovedEvent, PanelAddedEvent, PanelRemovedEvent, PageAddedEvent, ValidateQuestionEvent, SettingQuestionErrorsEvent, ValidatePanelEvent, ErrorCustomTextEvent, ValidatedErrorsOnCurrentPageEvent, ProcessHtmlEvent, GetQuestionTitleEvent, GetTitleTagNameEvent, GetQuestionNoEvent, ProgressTextEvent, TextMarkdownEvent, TextRenderAsEvent, SendResultEvent, GetResultEvent, UploadFilesEvent, DownloadFileEvent, ClearFilesEvent, LoadChoicesFromServerEvent, ProcessTextValueEvent, UpdateQuestionCssClassesEvent, UpdatePanelCssClassesEvent, UpdatePageCssClassesEvent, UpdateChoiceItemCssEvent, AfterRenderSurveyEvent, AfterRenderHeaderEvent, AfterRenderPageEvent, AfterRenderQuestionEvent, AfterRenderQuestionInputEvent, AfterRenderPanelEvent, FocusInQuestionEvent, FocusInPanelEvent, ShowingChoiceItemEvent, ChoicesLazyLoadEvent, GetChoiceDisplayValueEvent, MatrixRowAddedEvent, MatrixBeforeRowAddedEvent, MatrixRowRemovingEvent, MatrixRowRemovedEvent, MatrixAllowRemoveRowEvent, MatrixCellCreatingEvent, MatrixCellCreatedEvent, MatrixAfterCellRenderEvent, MatrixCellValueChangedEvent, MatrixCellValueChangingEvent, MatrixCellValidateEvent, DynamicPanelModifiedEvent, DynamicPanelRemovingEvent, TimerPanelInfoTextEvent, DynamicPanelItemValueChangedEvent, IsAnswerCorrectEvent, DragDropAllowEvent, ScrollingElementToTopEvent, GetQuestionTitleActionsEvent, GetPanelTitleActionsEvent, GetPageTitleActionsEvent, GetPanelFooterActionsEvent, GetMatrixRowActionsEvent, ElementContentVisibilityChangedEvent, GetExpressionDisplayValueEvent, ServerValidateQuestionsEvent, MultipleTextItemAddedEvent, MatrixColumnAddedEvent, GetQuestionDisplayValueEvent } from "./survey-events-api";
import { QuestionMatrixDropdownModelBase } from "./question_matrixdropdownbase";
import { QuestionMatrixDynamicModel } from "./question_matrixdynamic";
import { QuestionFileModel } from "./question_file";
import { QuestionMultipleTextModel } from "./question_multipletext";
/**
 * The `SurveyModel` object contains properties and methods that allow you to control the survey and access its elements.
 *
 * [View Demo](https://surveyjs.io/form-library/examples/nps-question/ (linkStyle))
 */
export declare class SurveyModel extends SurveyElementCore implements ISurvey, ISurveyData, ISurveyImpl, ISurveyTriggerOwner, ISurveyErrorOwner, ISurveyTimerText {
    static readonly TemplateRendererComponentName: string;
    static get cssType(): string;
    static set cssType(value: string);
    [index: string]: any;
    private static stylesManager;
    static platform: string;
    get platformName(): string;
    notifier: Notifier;
    /**
     * A suffix added to the name of the property that stores comments.
     *
     * Default value: "-Comment"
     *
     * Many question types allow respondents to leave comments. To enable this functionality, set a question's [`showCommentArea`](https://surveyjs.io/form-library/documentation/api-reference/checkbox-question-model#showCommentArea) property to `true`. Comment values are saved in a separate property. The property name is composed of the question `name` and `commentSuffix`.
     *
     * Respondents can also leave a comment when they select "Other" in a single- or multi-select question, such as Dropdown or Checkboxes. The property name for the comment value is composed according to the same rules. However, you can use the question `name` as a key to store the comment value instead. Disable the [`storeOthersAsComment`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#storeOthersAsComment) property in this case.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/create-checkboxes-question-in-javascript/ (linkStyle))
     */
    get commentSuffix(): string;
    set commentSuffix(val: string);
    get commentPrefix(): string;
    set commentPrefix(val: string);
    private valuesHash;
    private variablesHash;
    private editingObjValue;
    private textPreProcessor;
    private timerModelValue;
    private navigationBarValue;
    /**
     * An event that is raised after a trigger is executed.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * For more information about triggers, refer to the following help topic: [Conditional Survey Logic (Triggers)](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-survey-logic-triggers).
     * @see triggers
     * @see runTriggers
     */
    onTriggerExecuted: EventBase<SurveyModel, TriggerExecutedEvent>;
    /**
     * An event that is raised before the survey is completed. Use this event to prevent survey completion.
     * @see onComplete
     * @see doComplete
     * @see allowCompleteSurveyAutomatic
     */
    onCompleting: EventBase<SurveyModel, CompletingEvent>;
    /**
     * An event that is raised after the survey is completed. Use this event to send survey results to the server.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * For an example of how to use the methods described above, refer to the following help topic: [Store Survey Results in Your Own Database](https://surveyjs.io/form-library/documentation/handle-survey-results-store#store-survey-results-in-your-own-database).
     *
     * > Do not disable the [`showCompletedPage`](https://surveyjs.io/form-library/documentation/surveymodel#showCompletedPage) property if you call one of the `options.showSave...` methods. This is required because the UI that indicates data saving progress is integrated into the complete page. If you hide the complete page, the UI also becomes invisible.
     * @see onPartialSend
     * @see doComplete
     * @see allowCompleteSurveyAutomatic
     */
    onComplete: EventBase<SurveyModel, CompleteEvent>;
    /**
     * An event that is raised before the survey displays a [preview of given answers](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#preview-page). Use this event to cancel the preview.
     * @see showPreviewBeforeComplete
     * @see showPreview
     * @see cancelPreview
     */
    onShowingPreview: EventBase<SurveyModel, ShowingPreviewEvent>;
    /**
     * An event that is raised before the survey navigates to a specified URL. Use this event to change the URL or cancel the navigation.
     * @see navigateToUrl
     * @see navigateToUrlOnCondition
     */
    onNavigateToUrl: EventBase<SurveyModel, NavigateToUrlEvent>;
    /**
     * An event that is raised when the survey [`state`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#state) changes from `"starting"` to `"running"`. This occurs only if your survey includes a [start page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
     * @see firstPageIsStarted
     */
    onStarted: EventBase<SurveyModel, {}>;
    /**
     * Use this event to save incomplete survey results. Enable the [`sendResultOnPageNext`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#sendResultOnPageNext) property for this event to occur.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * Refer to the following help topic for more information on the use case: [Continue an Incomplete Survey](https://surveyjs.io/form-library/documentation/handle-survey-results-continue-incomplete).
     */
    onPartialSend: EventBase<SurveyModel, {}>;
    /**
     * An event that is raised before the current page is switched.
     *
     * @see currentPageNo
     * @see nextPage
     * @see prevPage
     **/
    onCurrentPageChanging: EventBase<SurveyModel, CurrentPageChangingEvent>;
    /**
     * An event that is raised after the current page is switched.
     *
     * @see currentPageNo
     * @see nextPage
     * @see prevPage
     */
    onCurrentPageChanged: EventBase<SurveyModel, CurrentPageChangedEvent>;
    /**
     * An event that is raised before a question value is changed.
     * @see setValue
     */
    onValueChanging: EventBase<SurveyModel, ValueChangingEvent>;
    /**
     * An event that is raised after a question value is changed
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * To handle value changes in matrix cells or panels within a [Dynamic Panel](https://surveyjs.io/form-library/documentation/api-reference/dynamic-panel-model), use the [`onMatrixCellValueChanged`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onMatrixCellValueChanged) or [`onDynamicPanelItemValueChanged`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onDynamicPanelItemValueChanged) event.
     * @see setValue
     */
    onValueChanged: EventBase<SurveyModel, ValueChangedEvent>;
    /**
     * An event that is raised after a [variable](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#variables) or [calculated value](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#calculated-values) is changed.
     *
     * @see setVariable
     * @see calculatedValues
     */
    onVariableChanged: EventBase<SurveyModel, VariableChangedEvent>;
    /**
     * An event that is raised after question visibility is changed.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
     */
    onQuestionVisibleChanged: EventBase<SurveyModel, QuestionVisibleChangedEvent>;
    /**
     * Obsolete. Please use onQuestionVisibleChanged event.
     * @see onQuestionVisibleChanged
     */
    onVisibleChanged: EventBase<SurveyModel, QuestionVisibleChangedEvent>;
    /**
     * An event that is raised after page visibility is changed.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
     */
    onPageVisibleChanged: EventBase<SurveyModel, PageVisibleChangedEvent>;
    /**
     * An event that is raised after page visibility is changed.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * Refer to the following help topic for information on how to implement conditional visibility: [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility).
     */
    onPanelVisibleChanged: EventBase<SurveyModel, PanelVisibleChangedEvent>;
    /**
     * An event that is raised when the survey creates any new object derived from [`Question`](https://surveyjs.io/form-library/documentation/api-reference/question).
     *
     * In a survey, complex elements ([Dynamic Matrix](https://surveyjs.io/form-library/examples/questiontype-matrixdynamic/), [Multiple Text](https://surveyjs.io/form-library/examples/questiontype-multipletext/), and [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/)) are composed of questions. Use this event to customize any question regardless of which survey element it belongs to.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * To use this event for questions loaded from JSON, create an empty survey model, add an event handler, and only then populate the model from the JSON object:
     *
     * ```js
     * import { Model } from "survey-core";
     *
     * const surveyJson = {
     *    // ...
     * };
     * // Create an empty model
     * const survey = new Model();
     * // Add an event handler
     * survey.onQuestionCreated.add((sender, options) => {
     *   //...
     * });
     * // Load the survey JSON schema
     * survey.fromJSON(surveyJson);
     * ```
     * @see onQuestionAdded
     */
    onQuestionCreated: EventBase<SurveyModel, QuestionCreatedEvent>;
    /**
     * An event that is raised when a new question is added to a panel or page.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * To use this event for questions loaded from JSON, create an empty survey model, add an event handler, and only then populate the model from the JSON object:
     *
     * ```js
     * import { Model } from "survey-core";
     *
     * const surveyJson = {
     *    // ...
     * };
     * // Create an empty model
     * const survey = new Model();
     * // Add an event handler
     * survey.onQuestionAdded.add((sender, options) => {
     *   //...
     * });
     * // Load the survey JSON schema
     * survey.fromJSON(surveyJson);
     * ```
     * @see onQuestionCreated
     */
    onQuestionAdded: EventBase<SurveyModel, QuestionAddedEvent>;
    /**
     * An event that is raised after a question is deleted from the survey.
     */
    onQuestionRemoved: EventBase<SurveyModel, QuestionRemovedEvent>;
    /**
     * An event that is raised when a new panel is added to a page.
     */
    onPanelAdded: EventBase<SurveyModel, PanelAddedEvent>;
    /**
     * An event that is raised after a panel is deleted from the survey.
     */
    onPanelRemoved: EventBase<SurveyModel, PanelRemovedEvent>;
    /**
     * An event that is raised when a new page is added to the survey.
     * @see PanelModel
     */
    onPageAdded: EventBase<SurveyModel, PageAddedEvent>;
    /**
     * An event that is raised when a question value is being validated. Use this event to specify a custom error message.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/add-custom-input-validation/ (linkStyle))
     * @see onServerValidateQuestions
     * @see onValidatePanel
     * @see onMatrixCellValidate
     * @see onSettingQuestionErrors
     */
    onValidateQuestion: EventBase<SurveyModel, ValidateQuestionEvent>;
    /**
     * An event that is raised before errors are assigned to a question. You may add/remove/modify errors for a question.
     * @see onValidateQuestion
     */
    onSettingQuestionErrors: EventBase<SurveyModel, SettingQuestionErrorsEvent>;
    /**
     * Use this event to validate data on your server.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/javascript-server-side-form-validation/ (linkStyle))
     * @see onValidateQuestion
     * @see onValidatePanel
     */
    onServerValidateQuestions: EventBase<SurveyModel, ServerValidateQuestionsEvent>;
    /**
     * An event that is raised when a panel is being validated. Use this event to specify a custom error message.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/add-custom-input-validation/ (linkStyle))
     * @see onValidateQuestion
     * @see onServerValidateQuestions
     */
    onValidatePanel: EventBase<SurveyModel, ValidatePanelEvent>;
    /**
     * Use the event to change the default error text.
     */
    onErrorCustomText: EventBase<SurveyModel, ErrorCustomTextEvent>;
    /**
     * Use the this event to be notified when the survey finished validate questions on the current page. It commonly happens when a user try to go to the next page or complete the survey
     */
    onValidatedErrorsOnCurrentPage: EventBase<SurveyModel, ValidatedErrorsOnCurrentPageEvent>;
    /**
     * An event that is raised when the survey processes HTML content. Handle this event to modify HTML content before displaying.
     * @see completedHtml
     * @see loadingHtml
     * @see QuestionHtmlModel.html
     */
    onProcessHtml: EventBase<SurveyModel, ProcessHtmlEvent>;
    /**
     * Use this event to change a question's display text.
     */
    onGetQuestionDisplayValue: EventBase<SurveyModel, GetQuestionDisplayValueEvent>;
    /**
     * Use this event to change the question title in code. If you want to remove question numbering then set showQuestionNumbers to "off".
     * @see showQuestionNumbers
     * @see requiredText
     */
    onGetQuestionTitle: EventBase<SurveyModel, GetQuestionTitleEvent>;
    /**
     * Use this event to change the element title tag name that renders by default.
     * @see showQuestionNumbers
     * @see requiredText
     */
    onGetTitleTagName: EventBase<SurveyModel, GetTitleTagNameEvent>;
    /**
     * Use this event to change the question no in code. If you want to remove question numbering then set showQuestionNumbers to "off".
     * @see showQuestionNumbers
     * @see questionStartIndex
     */
    onGetQuestionNo: EventBase<SurveyModel, GetQuestionNoEvent>;
    /**
     * Use this event to change the progress text in code.
     *  @see progressBarType
     */
    onProgressText: EventBase<SurveyModel, ProgressTextEvent>;
    /**
     * Use this event to process the markdown text.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/edit-survey-questions-markdown/ (linkStyle))
     */
    onTextMarkdown: EventBase<SurveyModel, TextMarkdownEvent>;
    /**
     * Use this event to specity render component name used for text rendering.
     */
    onTextRenderAs: EventBase<SurveyModel, TextRenderAsEvent>;
    /**
     * The event fires when it gets response from the [api.surveyjs.io](https://api.surveyjs.io) service on saving survey results. Use it to find out if the results have been saved successfully.
     */
    onSendResult: EventBase<SurveyModel, SendResultEvent>;
    /**
     * Use it to get results after calling the `getResult` method. It returns a simple analytics from [api.surveyjs.io](https://api.surveyjs.io) service.
     * @see getResult
     */
    onGetResult: EventBase<SurveyModel, GetResultEvent>;
    /**
     * An event that is raised on uploading the file in QuestionFile when `storeDataAsText` is set to `false`. Use this event to change the uploaded file name or to prevent a particular file from being uploaded.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
     * @see uploadFiles
     * @see QuestionFileModel.storeDataAsText
     * @see onDownloadFile
     * @see onClearFiles
     */
    onUploadFiles: EventBase<SurveyModel, UploadFilesEvent>;
    /**
     * An event that is raised on downloading a file in QuestionFile. Use this event to pass the file to a preview.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/questiontype-file/ (linkStyle))
     * @see downloadFile
     * @see onClearFiles
     * @see onUploadFiles
     */
    onDownloadFile: EventBase<SurveyModel, DownloadFileEvent>;
    /**
     * This event is fired on clearing the value in a QuestionFile. Use this event to remove files stored on your server.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/file-delayed-upload/ (linkStyle))
     * @see onDownloadFile
     * @see onUploadFiles
     */
    onClearFiles: EventBase<SurveyModel, ClearFilesEvent>;
    /**
     * An event that is raised after choices for radiogroup, checkbox, and dropdown has been loaded from a RESTful service and before they are assigned to a question.
     * You may change the choices, before they are assigned or disable/enabled make visible/invisible question, based on loaded results.
     */
    onLoadChoicesFromServer: EventBase<SurveyModel, LoadChoicesFromServerEvent>;
    /**
     * An event that is raised after survey is loaded from api.surveyjs.io service.
     * You can use this event to perform manipulation with the survey model after it was loaded from the web service.
     * @see surveyId
     * @see loadSurveyFromService
     */
    onLoadedSurveyFromService: EventBase<SurveyModel, {}>;
    /**
     * An event that is raised on processing the text when it finds a text in brackets: `{somevalue}`. By default, it uses the value of survey question values and variables.
     * For example, you may use the text processing in loading choices from the web. If your `choicesByUrl.url` equals to "UrlToServiceToGetAllCities/{country}/{state}",
     * you may set on this event `options.value` to "all" or empty string when the "state" value/question is non selected by a user.
     */
    onProcessTextValue: EventBase<SurveyModel, ProcessTextValueEvent>;
    /**
     * An event that is raised before rendering a question. Use it to override the default question CSS classes.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-cssclasses/ (linkStyle))
     */
    onUpdateQuestionCssClasses: EventBase<SurveyModel, UpdateQuestionCssClassesEvent>;
    /**
     * An event that is raised before rendering a panel. Use it to override the default panel CSS classes.
     */
    onUpdatePanelCssClasses: EventBase<SurveyModel, UpdatePanelCssClassesEvent>;
    /**
     * An event that is raised before rendering a page. Use it to override the default page CSS classes.
     */
    onUpdatePageCssClasses: EventBase<SurveyModel, UpdatePageCssClassesEvent>;
    /**
     * An event that is raised before rendering a choice item in radiogroup, checkbox or dropdown questions. Use it to override the default choice item css.
     */
    onUpdateChoiceItemCss: EventBase<SurveyModel, UpdateChoiceItemCssEvent>;
    /**
     * An event that is raised right after survey is rendered in DOM.
     */
    onAfterRenderSurvey: EventBase<SurveyModel, AfterRenderSurveyEvent>;
    /**
     * An event that is raised right after a page is rendered in DOM. Use it to modify HTML elements.
     */
    onAfterRenderHeader: EventBase<SurveyModel, AfterRenderHeaderEvent>;
    /**
     * An event that is raised right after a page is rendered in DOM. Use it to modify HTML elements.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-afterrender/ (linkStyle))
     */
    onAfterRenderPage: EventBase<SurveyModel, AfterRenderPageEvent>;
    /**
     * An event that is raised right after a question is rendered in DOM. Use it to modify HTML elements.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-afterrender/ (linkStyle))
     */
    onAfterRenderQuestion: EventBase<SurveyModel, AfterRenderQuestionEvent>;
    /**
     * An event that is raised right after a non-composite question (text, comment, dropdown, radiogroup, checkbox) is rendered in DOM. Use it to modify HTML elements.
     * This event is not fired for matrices, panels, multiple text and image picker.
     */
    onAfterRenderQuestionInput: EventBase<SurveyModel, AfterRenderQuestionInputEvent>;
    /**
     * An event that is raised right after a panel is rendered in DOM. Use it to modify HTML elements.
     */
    onAfterRenderPanel: EventBase<SurveyModel, AfterRenderPanelEvent>;
    /**
     * The event occurs when an element within a question gets focus.
     * @see onFocusInPanel
     */
    onFocusInQuestion: EventBase<SurveyModel, FocusInQuestionEvent>;
    /**
     * The event occurs when an element within a panel gets focus.
     * @see onFocusInQuestion
     */
    onFocusInPanel: EventBase<SurveyModel, FocusInPanelEvent>;
    /**
     * Use this event to change the visibility of an individual choice item in [Checkbox](https://surveyjs.io/Documentation/Library?id=questioncheckboxmodel), [Dropdown](https://surveyjs.io/Documentation/Library?id=questiondropdownmodel), [Radiogroup](https://surveyjs.io/Documentation/Library?id=questionradiogroupmodel), and other similar question types.
     */
    onShowingChoiceItem: EventBase<SurveyModel, ShowingChoiceItemEvent>;
    /**
     * Use this event to load choice items in [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel) and [Tag Box](https://surveyjs.io/form-library/documentation/questiontagboxmodel) questions on demand.
     *
     * This event is raised only for those questions that have the [`choicesLazyLoadEnabled`](https://surveyjs.io/form-library/documentation/questiondropdownmodel#choicesLazyLoadEnabled) property set to `true`.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/lazy-loading-dropdown/ (linkStyle))
     */
    onChoicesLazyLoad: EventBase<SurveyModel, ChoicesLazyLoadEvent>;
    /**
     * Use this event to load a display text for the [default choice item](https://surveyjs.io/form-library/documentation/questiondropdownmodel#defaultValue) in [Dropdown](https://surveyjs.io/form-library/documentation/questiondropdownmodel) and [Tag Box](https://surveyjs.io/form-library/documentation/questiontagboxmodel) questions.
     *
     * If you load choices from a server (use [`choicesByUrl`](https://surveyjs.io/form-library/documentation/questiondropdownmodel#choicesByUrl) or [`onChoicesLazyLoad`](https://surveyjs.io/form-library/documentation/surveymodel#onChoicesLazyLoad)), display texts become available only when data is loaded, which does not happen until a user opens the drop-down menu. However, a display text for a default choice item is required before that. In this case, you can load data individually for the default item within the `onGetChoiceDisplayValue` event handler.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/lazy-loading-dropdown/ (linkStyle))
     */
    onGetChoiceDisplayValue: EventBase<SurveyModel, GetChoiceDisplayValueEvent>;
    /**
     * An event that is raised on adding a new row in Matrix Dynamic question.
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDynamicModel.visibleRows
     */
    onMatrixRowAdded: EventBase<SurveyModel, MatrixRowAddedEvent>;
    /**
     * An event that is raised before adding a new row in Matrix Dynamic question.
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDynamicModel.visibleRows
     */
    onMatrixBeforeRowAdded: EventBase<SurveyModel, MatrixBeforeRowAddedEvent>;
    /**
     * An event that is raised before removing a row from Matrix Dynamic question. You can disable removing and clear the data instead.
     * @see QuestionMatrixDynamicModel
     * @see onMatrixRowRemoved
     * @see onMatrixAllowRemoveRow
     */
    onMatrixRowRemoving: EventBase<SurveyModel, MatrixRowRemovingEvent>;
    /**
     * An event that is raised on removing a row from Matrix Dynamic question.
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDynamicModel.visibleRows
     * @see onMatrixRowRemoving
     * @see onMatrixAllowRemoveRow
     */
    onMatrixRowRemoved: EventBase<SurveyModel, MatrixRowRemovedEvent>;
    /**
     * An event that is raised before rendering "Remove" button for removing a row from Matrix Dynamic question.
     * @see QuestionMatrixDynamicModel
     * @see onMatrixRowRemoving
     * @see onMatrixRowRemoved
     */
    onMatrixAllowRemoveRow: EventBase<SurveyModel, MatrixAllowRemoveRowEvent>;
    /**
     * An event that is raised before creating cell question in the matrix. You can change the cell question type by setting different options.cellType.
     * @see onMatrixBeforeRowAdded
     * @see onMatrixCellCreated
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDropdownModel
     */
    onMatrixCellCreating: EventBase<SurveyModel, MatrixCellCreatingEvent>;
    /**
      * An event that is raised for every cell created in Matrix Dynamic and Matrix Dropdown questions.
      * @see onMatrixBeforeRowAdded
      * @see onMatrixCellCreating
      * @see onMatrixRowAdded
      * @see QuestionMatrixDynamicModel
      * @see QuestionMatrixDropdownModel
      */
    onMatrixCellCreated: EventBase<SurveyModel, MatrixCellCreatedEvent>;
    /**
     * An event that is raised for every cell after is has been rendered in DOM.
     * @see onMatrixCellCreated
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDropdownModel
     */
    onMatrixAfterCellRender: EventBase<SurveyModel, MatrixAfterCellRenderEvent>;
    /**
     * An event that is raised when cell value is changed in Matrix Dynamic and Matrix Dropdown questions.
     * @see onMatrixCellValueChanging
     * @see onMatrixBeforeRowAdded
     * @see onMatrixRowAdded
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDropdownModel
     */
    onMatrixCellValueChanged: EventBase<SurveyModel, MatrixCellValueChangedEvent>;
    /**
     * An event that is raised on changing cell value in Matrix Dynamic and Matrix Dropdown questions. You may change the `options.value` property to change a cell value.
     * @see onMatrixCellValueChanged
     * @see onMatrixBeforeRowAdded
     * @see onMatrixRowAdded
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDropdownModel
     */
    onMatrixCellValueChanging: EventBase<SurveyModel, MatrixCellValueChangingEvent>;
    /**
     * An event that is raised when Matrix Dynamic and Matrix Dropdown questions validate the cell value.
     * @see onMatrixBeforeRowAdded
     * @see onMatrixRowAdded
     * @see QuestionMatrixDynamicModel
     * @see QuestionMatrixDropdownModel
     */
    onMatrixCellValidate: EventBase<SurveyModel, MatrixCellValidateEvent>;
    /**
     * An event that is raised on adding a new column in Matrix Dynamic or Matrix Dropdown question.
     */
    onMatrixColumnAdded: EventBase<SurveyModel, MatrixColumnAddedEvent>;
    /**
     * An event that is raised on adding a new item in Multiple Text question.
     */
    onMultipleTextItemAdded: EventBase<SurveyModel, MultipleTextItemAddedEvent>;
    /**
     * An event that is raised after a new panel is added to a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
     */
    onDynamicPanelAdded: EventBase<SurveyModel, DynamicPanelModifiedEvent>;
    /**
     * An event that is raised after a panel is deleted from a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
     */
    onDynamicPanelRemoved: EventBase<SurveyModel, DynamicPanelModifiedEvent>;
    /**
     * An event that is raised before a panel is deleted from a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question. Use this event to cancel the deletion.
     */
    onDynamicPanelRemoving: EventBase<SurveyModel, DynamicPanelRemovingEvent>;
    /**
    * An event that is raised every second if the method `startTimer` has been called.
    * @see startTimer
    * @see timeSpent
    * @see Page.timeSpent
    */
    onTimer: EventBase<SurveyModel, {}>;
    /**
     * An event that is raised before displaying a new information in the Timer Panel. Use it to change the default text.
     */
    onTimerPanelInfoText: EventBase<SurveyModel, TimerPanelInfoTextEvent>;
    /**
     * An event that is raised after an item value is changed in a panel within a [Dynamic Panel](https://surveyjs.io/form-library/examples/questiontype-paneldynamic/) question.
     */
    onDynamicPanelItemValueChanged: EventBase<SurveyModel, DynamicPanelItemValueChangedEvent>;
    /**
     * Use this event to define, whether an answer to a question is correct or not.
     * @see Question.value
     * @see Question.correctAnswer
     */
    onIsAnswerCorrect: EventBase<SurveyModel, IsAnswerCorrectEvent>;
    /**
     * Use this event to control drag&drop operations during design mode.
     * @see setDesignMode
     * @see isDesignMode
     */
    onDragDropAllow: EventBase<SurveyModel, DragDropAllowEvent>;
    /**
     * Use this event to control scrolling element to top. You can cancel the default behavior by setting options.cancel property to true.
     */
    onScrollingElementToTop: EventBase<SurveyModel, ScrollingElementToTopEvent>;
    onLocaleChangedEvent: EventBase<SurveyModel, {}>;
    /**
     * Use this event to create/customize actions to be displayed in a question's title.
     *
     * For information on event handler parameters, refer to descriptions within the interface.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-titleactions/ (linkStyle))
     * @see IAction
     * @see Question
    */
    onGetQuestionTitleActions: EventBase<SurveyModel, GetQuestionTitleActionsEvent>;
    /**
     * Use this event to create/customize actions to be displayed in a panel's title.
     * @see IAction
     * @see PanelModel
     */
    onGetPanelTitleActions: EventBase<SurveyModel, GetPanelTitleActionsEvent>;
    /**
     * Use this event to create/customize actions to be displayed in a page's title.
     * @see IAction
     * @see PageModel
     */
    onGetPageTitleActions: EventBase<SurveyModel, GetPageTitleActionsEvent>;
    /**
     * An event that allows you to add, delete, or modify actions in the footer of a [Panel](https://surveyjs.io/form-library/documentation/panelmodel).
     */
    onGetPanelFooterActions: EventBase<SurveyModel, GetPanelFooterActionsEvent>;
    /**
     * Use this event to create/customize actions to be displayed in a matrix question's row.
     * @see IAction
     * @see QuestionMatrixDropdownModelBase
     */
    onGetMatrixRowActions: EventBase<SurveyModel, GetMatrixRowActionsEvent>;
    /**
     * An event that is raised after the survey element content was collapsed or expanded.
     * @see onElementContentVisibilityChanged
     */
    onElementContentVisibilityChanged: EventBase<SurveyModel, ElementContentVisibilityChangedEvent>;
    /**
     * An event that is raised before expression question convert it's value into display value for rendering.
     */
    onGetExpressionDisplayValue: EventBase<SurveyModel, GetExpressionDisplayValueEvent>;
    constructor(jsonObj?: any, renderedElement?: any);
    protected createTryAgainAction(): IAction;
    private createHtmlLocString;
    /**
     * The list of errors on loading survey JSON. If the list is empty after loading a JSON, then the JSON is correct and has no errors.
     * @see JsonError
     */
    jsonErrors: Array<JsonError>;
    getType(): string;
    protected onPropertyValueChanged(name: string, oldValue: any, newValue: any): void;
    /**
     * Returns an array of all pages in the survey.
     *
     * To get an array of only visible pages, use the [`visiblePages`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#visiblePages) array.
     * @see PageModel
     */
    get pages(): Array<PageModel>;
    renderCallback: () => void;
    render(element?: any): void;
    updateSurvey(newProps: any, oldProps?: any): void;
    getCss(): any;
    private cssValue;
    private updateCompletedPageCss;
    private updateCss;
    get css(): any;
    set css(value: any);
    setCss(value: any, needMerge?: boolean): void;
    get cssTitle(): string;
    get cssNavigationComplete(): string;
    get cssNavigationPreview(): string;
    get cssNavigationEdit(): string;
    get cssNavigationPrev(): string;
    get cssNavigationStart(): string;
    get cssNavigationNext(): string;
    private get cssSurveyNavigationButton();
    get bodyCss(): string;
    get bodyContainerCss(): string;
    completedCss: string;
    containerCss: string;
    private getNavigationCss;
    private lazyRenderingValue;
    showBrandInfo: boolean;
    /**
     * By default all rows are rendered no matters if they are visible or not.
     * Set it true, and survey markup rows will be rendered only if they are visible in viewport.
     * This feature is experimantal and might do not support all the use cases.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-lazy/ (linkStyle))
     */
    get lazyRendering(): boolean;
    set lazyRendering(val: boolean);
    get isLazyRendering(): boolean;
    private updateLazyRenderingRowsOnRemovingElements;
    /**
     * Gets or sets a list of triggers in the survey.
     * @see SurveyTrigger
     */
    get triggers(): Array<SurveyTrigger>;
    set triggers(val: Array<SurveyTrigger>);
    /**
     * An array of [calculated values](https://surveyjs.io/form-library/documentation/design-survey-conditional-logic#calculated-values).
     */
    get calculatedValues(): Array<CalculatedValue>;
    set calculatedValues(val: Array<CalculatedValue>);
    /**
     * The identifier of a survey JSON schema to load from the [SurveyJS Service](https://api.surveyjs.io).
     *
     * Refer to the following help topic for more information: [Store Survey Results in the SurveyJS Service](https://surveyjs.io/form-library/documentation/handle-survey-results-store#store-survey-results-in-the-surveyjs-service).
     * @see loadSurveyFromService
     * @see onLoadedSurveyFromService
     */
    get surveyId(): string;
    set surveyId(val: string);
    /**
     * An identifier used to save survey results to the [SurveyJS Service](https://api.surveyjs.io).
     *
     * Refer to the following help topic for more information: [Store Survey Results in the SurveyJS Service](https://surveyjs.io/form-library/documentation/handle-survey-results-store#store-survey-results-in-the-surveyjs-service).
     * @see onComplete
     * @see surveyShowDataSaving
     */
    get surveyPostId(): string;
    set surveyPostId(val: string);
    /**
     * A user identifier (e-mail or other unique ID).
     *
     * If your application works with the [SurveyJS Service](https://api.surveyjs.io), the ID ensures that users do not pass the same survey twice. On the second run, they will see the [Completed Before page](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#completedBeforeHtml).
     * @see cookieName
     */
    get clientId(): string;
    set clientId(val: string);
    /**
     * A cookie name used to save information about survey completion.
     *
     * When this property has a value, the survey creates a cookie with the specified name on completion. This cookie helps ensure that users do not pass the same survey twice. On the second run, they will see the [Completed Before page](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#completedBeforeHtml).
     * @see cliendId
     */
    get cookieName(): string;
    set cookieName(val: string);
    /**
     * Specifies whether to save survey results when respondents swtich between pages. Handle the [`onPartialSend`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onPartialSend) event to implement the save operation.
     *
     * Refer to the following help topic for more information on the use case: [Continue an Incomplete Survey](https://surveyjs.io/form-library/documentation/handle-survey-results-continue-incomplete).
     */
    get sendResultOnPageNext(): boolean;
    set sendResultOnPageNext(val: boolean);
    /**
     * Gets or sets whether to show the progress on saving/sending data into the [api.surveyjs.io](https://api.surveyjs.io) service.
     * @see surveyPostId
     */
    get surveyShowDataSaving(): boolean;
    set surveyShowDataSaving(val: boolean);
    /**
     * Gets or sets whether the first input is focused on showing a next or a previous page.
     */
    get focusFirstQuestionAutomatic(): boolean;
    set focusFirstQuestionAutomatic(val: boolean);
    /**
     * Gets or sets whether the first input is focused if the current page has errors.
     * Set this property to `false` (the default value is `true`) if you do not want to bring the focus to the first question that has error on the page.
     */
    get focusOnFirstError(): boolean;
    set focusOnFirstError(val: boolean);
    /**
     * Gets or sets the navigation buttons position.
     * Possible values: 'bottom' (default), 'top', 'both' and 'none'. Set it to 'none' to hide 'Prev', 'Next' and 'Complete' buttons.
     * It makes sense if you are going to create a custom navigation, have only a single page, or the `goNextPageAutomatic` property is set to `true`.
     * @see goNextPageAutomatic
     * @see showPrevButton
     */
    get showNavigationButtons(): string | any;
    set showNavigationButtons(val: string | any);
    /**
     * Gets or sets whether the Survey displays "Prev" button in its pages. Set it to `false` to prevent end-users from going back to their answers.
     * @see showNavigationButtons
     */
    get showPrevButton(): boolean;
    set showPrevButton(val: boolean);
    /**
     * Gets or sets the visibility of the table of contents.
     *
     * Default value: `false`
     *
     * [View Demo](https://surveyjs.io/form-library/examples/toc-feature/ (linkStyle))
     * @see tocLocation
     */
    get showTOC(): boolean;
    set showTOC(val: boolean);
    /**
     * Gets or sets the position of the table of contents. Applies only when the table of contents is visible.
     *
     * Possible values:
     *
     * - `"left"` (default)
     * - `"right"`
     *
     * [View Demo](https://surveyjs.io/form-library/examples/toc-feature/ (linkStyle))
     * @see showTOC
     */
    get tocLocation(): "left" | "right";
    set tocLocation(val: "left" | "right");
    /**
     * Gets or sets whether the Survey displays survey title in its pages. Set it to `false` to hide a survey title.
     * @see title
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
     */
    get showTitle(): boolean;
    set showTitle(val: boolean);
    /**
     * Gets or sets whether the Survey displays page titles. Set it to `false` to hide page titles.
     * @see PageModel.title
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
     */
    get showPageTitles(): boolean;
    set showPageTitles(val: boolean);
    /**
     * On finishing the survey the complete page is shown. Set the property to `false`, to hide the complete page.
     * @see data
     * @see onComplete
     * @see navigateToUrl
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
     */
    get showCompletedPage(): boolean;
    set showCompletedPage(val: boolean);
    /**
     * A URL to which respondents should be navigated after survey completion.
     * @see onNavigateToUrl
     * @see navigateToUrlOnCondition
     */
    get navigateToUrl(): string;
    set navigateToUrl(val: string);
    /**
     * An array of objects that allows you to navigate respondents to different URLs after survey completion.
     *
     * Each object should include the [`expression`](https://surveyjs.io/form-library/documentation/api-reference/urlconditionitem#url) and [`url`](https://surveyjs.io/form-library/documentation/api-reference/urlconditionitem#expression) properties. When `expression` evaluates to `true`, the survey navigates to the corresponding `url`. Refer to the following help topic for more information about expressions: [Expressions](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#expressions).
     * @see onNavigateToUrl
     * @see navigateToUrl
     */
    get navigateToUrlOnCondition(): Array<UrlConditionItem>;
    set navigateToUrlOnCondition(val: Array<UrlConditionItem>);
    getNavigateToUrl(): string;
    private navigateTo;
    /**
     * Gets or sets the required question mark. The required question mark is a char or string that is rendered in the required questions' titles.
     * @see Question.title
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
     */
    get requiredText(): string;
    set requiredText(val: string);
    /**
     * Gets or sets whether to hide all required errors.
     */
    hideRequiredErrors: boolean;
    beforeSettingQuestionErrors(question: Question, errors: Array<SurveyError>): void;
    beforeSettingPanelErrors(question: IPanel, errors: Array<SurveyError>): void;
    private maakeRequiredErrorsInvisibgle;
    /**
     * Gets or sets the first question index. The first question index is '1' by default. You may start it from '100' or from 'A', by setting '100' or 'A' to this property.
     * You can set the start index to "(1)" or "# A)" or "a)" to render question number as (1), # A) and a) accordingly.
     * @see Question.title
     * @see requiredText
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
     */
    get questionStartIndex(): string;
    set questionStartIndex(val: string);
    /**
     * Gets or sets whether the "Others" option text is stored as question comment.
     *
     * By default the entered text in the "Others" input in the checkbox/radiogroup/dropdown is stored as `"question name " + "-Comment"`. The value itself is `"question name": "others"`.
     * Set this property to `false`, to store the entered text directly in the `"question name"` key.
     * @see commentSuffix
     */
    get storeOthersAsComment(): boolean;
    set storeOthersAsComment(val: boolean);
    /**
     * Specifies the default maximum length for questions like text and comment, including matrix cell questions.
     *
     * The default value is `0`, that means that the text and comment have the same max length as the standard HTML input - 524288 characters: https://www.w3schools.com/tags/att_input_maxlength.asp.
     * @see maxOthersLength
     */
    get maxTextLength(): number;
    set maxTextLength(val: number);
    /**
     * Gets or sets the default maximum length for question comments and others
     *
     * The default value is `0`, that means that the question comments have the same max length as the standard HTML input - 524288 characters: https://www.w3schools.com/tags/att_input_maxlength.asp.
     * @see Question.showCommentArea
     * @see Question.showOtherItem
     * @see maxTextLength
     */
    get maxOthersLength(): number;
    set maxOthersLength(val: number);
    /**
     * Specifies whether the survey switches to the next page automatically after a user answers all questions on the current page.
     *
     * Default value: `false`
     *
     * If you enable this property, the survey is also completed automatically. Set the [`allowCompleteSurveyAutomatic`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#allowCompleteSurveyAutomatic) property to `false` if you want to disable this behavior.
     *
     * > If any of the following questions is answered last, the survey does not switch to the next page: Checkbox, Boolean (rendered as Checkbox), Comment, Signature Pad, Image Picker (with Multi Select), File, Single-Choice Matrix (not all rows are answered), Dynamic Matrix, Panel Dynamic.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/automatically-move-to-next-page-if-answer-selected/ (linkStyle))
     */
    get goNextPageAutomatic(): boolean | "autogonext";
    set goNextPageAutomatic(val: boolean | "autogonext");
    /**
     * Specifies whether to complete the survey automatically after a user answers all questions on the last page. Applies only if the [`goNextPageAutomatic`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#goNextPageAutomatic) property is `true`.
     *
     * Default value: `true`
     */
    get allowCompleteSurveyAutomatic(): boolean;
    set allowCompleteSurveyAutomatic(val: boolean);
    /**
     * Specifies when the survey validates answers.
     *
     * Possible values:
     *
     * - `"onNextPage"` (default) - Triggers validation before the survey is switched to the next page or completed.
     * - `"onValueChanged"` - Triggers validation each time a question value is changed.
     * - `"onComplete"` - Triggers validation when a user clicks the Complete button. If previous pages contain errors, the survey switches to the page with the first error.
     *
     * Refer to the following help topic for more information: [Data Validation](https://surveyjs.io/form-library/documentation/data-validation).
     */
    get checkErrorsMode(): string;
    set checkErrorsMode(val: string);
    /**
     * Specifies whether to increase the height of text areas to accommodate multi-line comments.
     *
     * Default value: `false`
     *
     * You can override this property for individual Comment questions: [`autoGrow`](https://surveyjs.io/form-library/documentation/api-reference/comment-field-model#autoGrow).
     */
    get autoGrowComment(): boolean;
    set autoGrowComment(val: boolean);
    /**
     * Gets or sets a value that specifies how the survey updates its questions' text values.
     *
     * The following options are available:
     *
     * - `onBlur` (default) - the value is updated after an input loses the focus.
     * - `onTyping` - update the value of text questions, "text" and "comment", on every key press.
     *
     * Note, that setting to "onTyping" may lead to a performance degradation, in case you have many expressions in the survey.
     */
    get textUpdateMode(): string;
    set textUpdateMode(val: string);
    /**
     * Specifies when to remove values of invisible questions from [survey results](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#data).
     *
     * Possible values:
     *
     * - `"onComplete"` (default) - Clears invisible question values when the survey is complete.
     * - `"onHidden"` - Clears a question value when the question becomes invisible. If the question is invisible initially, its value is removed on survey completion.
     * - `"onHiddenContainer"` - Clears a question value when the question or its containter (page or panel) becomes invisible. If the question is invisible initially, its value is removed on survey completion.
     * - `"none"` - Keeps invisible values in survey results.
     * - `true` - Equivalent to `"onComplete"`.
     * - `false` - Equivalent to `"none"`.
     * @see [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility)
     * @see onComplete
     */
    get clearInvisibleValues(): any;
    set clearInvisibleValues(val: any);
    /**
     * Removes values that cannot be assigned to a question, for example, choices unlisted in the `choices` array.
     *
     * Call this method after you assign new question values in code to ensure that they are acceptable.
     *
     * > This method does not remove values that fail validation. Call the [`validate()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#validate) method to validate newly assigned values.
     * @param removeNonExistingRootKeys Pass `true` to remove values that do not correspond to any question or [calculated value](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#calculated-values).
     */
    clearIncorrectValues(removeNonExistingRootKeys?: boolean): void;
    private iscorrectValueWithPostPrefix;
    /**
     * Specifies whether to keep values that cannot be assigned to questions, for example, choices unlisted in the `choices` array.
     *
     * > This property cannot be specified in the survey JSON schema. Use dot notation to specify it.
     * @see clearIncorrectValues
     */
    get keepIncorrectValues(): boolean;
    set keepIncorrectValues(val: boolean);
    /**
     * Gets or sets the survey locale. The default value it is empty, this means the 'en' locale is used.
     * You can set it to 'de' - German, 'fr' - French and so on. The library has built-in localization for several languages. The library has a multi-language support as well.
     */
    get locale(): string;
    set locale(value: string);
    private onSurveyLocaleChanged;
    /**
     * Returns an array of locales that are used in the survey's translation.
     */
    getUsedLocales(): Array<string>;
    localeChanged(): void;
    getLocale(): string;
    locStrsChanged(): void;
    getMarkdownHtml(text: string, name: string): string;
    getRenderer(name: string): string;
    getRendererContext(locStr: LocalizableString): LocalizableString;
    getRendererForString(element: Question | PanelModel | PageModel | SurveyModel, name: string): string;
    getRendererContextForString(element: Base, locStr: LocalizableString): LocalizableString;
    getExpressionDisplayValue(question: Question, value: any, displayValue: string): string;
    private getBuiltInRendererForString;
    getProcessedText(text: string): string;
    getLocString(str: string): string;
    getErrorCustomText(text: string, error: SurveyError): string;
    getSurveyErrorCustomText(obj: PanelModel | Question | SurveyModel, text: string, error: SurveyError): string;
    getQuestionDisplayValue(question: Question, displayValue: any): any;
    /**
     * Returns the text displayed when a survey has no visible pages and questions.
     */
    get emptySurveyText(): string;
    /**
     * Gets or sets a survey logo.
     * @see title
     */
    get logo(): string;
    set logo(value: string);
    get locLogo(): LocalizableString;
    /**
     * Gets or sets a survey logo width.
     * @see logo
     */
    get logoWidth(): any;
    set logoWidth(value: any);
    /**
     * Gets or sets a survey logo height.
     * @see logo
     */
    get logoHeight(): any;
    set logoHeight(value: any);
    /**
     * Gets or sets a survey logo position.
     * @see logo
     */
    get logoPosition(): string;
    set logoPosition(value: string);
    get hasLogo(): boolean;
    private updateHasLogo;
    get isLogoBefore(): boolean;
    get isLogoAfter(): boolean;
    get logoClassNames(): string;
    get renderedHasTitle(): boolean;
    get renderedHasDescription(): boolean;
    get hasTitle(): boolean;
    get renderedHasLogo(): boolean;
    get renderedHasHeader(): boolean;
    /**
     * The logo fit mode.
     * @see logo
     */
    get logoFit(): string;
    set logoFit(val: string);
    _isMobile: boolean;
    setIsMobile(newVal?: boolean): void;
    private get isMobile();
    protected isLogoImageChoosen(): string;
    get titleMaxWidth(): string;
    /**
     * An image to display in the background of the survey or form. Accepts a base64 or URL string value.
     * @see backgroundOpacity
     */
    get backgroundImage(): string;
    set backgroundImage(value: string);
    get locBackgroundImage(): LocalizableString;
    renderBackgroundImage: string;
    private updateRenderBackgroundImage;
    /**
     * A value from 0 to 1 that specifies how transparent the survey background should be: 0 makes the background completely transparent, and 1 makes it opaque.
     * @see backgroundImage
     */
    get backgroundOpacity(): number;
    set backgroundOpacity(val: number);
    get renderBackgroundOpacity(): string;
    /**
     * HTML content displayed on the [complete page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#complete-page).
     *
     * [View Demo](https://surveyjs.io/form-library/examples/modify-survey-navigation-settings/ (linkStyle))
     * @see showCompletedPage
     * @see completedHtmlOnCondition
     */
    get completedHtml(): string;
    set completedHtml(value: string);
    get locCompletedHtml(): LocalizableString;
    /**
     * An array of objects that allows you to specify different HTML content for the [complete page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#complete-page).
     *
     * Each object should include the [`expression`](https://surveyjs.io/form-library/documentation/api-reference/htmlconditionitem#expression) and [`html`](https://surveyjs.io/form-library/documentation/api-reference/htmlconditionitem#html) properties. When `expression` evaluates to `true`, the survey uses the corresponding HTML markup instead of [`completedHtml`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#completedHtml). Refer to the following help topic for more information about expressions: [Expressions](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#expressions).
     *
     * [View Demo](https://surveyjs.io/form-library/examples/nps-question/ (linkStyle))
     */
    get completedHtmlOnCondition(): Array<HtmlConditionItem>;
    set completedHtmlOnCondition(val: Array<HtmlConditionItem>);
    /**
     * Calculates a given expression and returns a result value.
     * @param expression
     */
    runExpression(expression: string): any;
    /**
     * Calculates a given expression and returns `true` or `false`.
     * @param expression
     */
    runCondition(expression: string): boolean;
    /**
     * Run all triggers that performs on value changed and not on moving to the next page.
     */
    runTriggers(): void;
    get renderedCompletedHtml(): string;
    private getExpressionItemOnRunCondition;
    /**
     * HTML content displayed to a user who has completed the survey before.
     * @see clientId
     * @see cookieName
     * @see processedCompletedBeforeHtml
     */
    get completedBeforeHtml(): string;
    set completedBeforeHtml(value: string);
    get locCompletedBeforeHtml(): LocalizableString;
    /**
     * HTML content displayed while a survey JSON schema is being loaded from the [SurveyJS Service](https://api.surveyjs.io).
     * @see surveyId
     * @see processedLoadingHtml
     */
    get loadingHtml(): string;
    set loadingHtml(value: string);
    get locLoadingHtml(): LocalizableString;
    get defaultLoadingHtml(): string;
    get navigationBar(): ActionContainer;
    /**
     * Adds a custom navigation item similar to the Previous Page, Next Page, and Complete buttons.
     * Accepts an object described in the [IAction](https://surveyjs.io/Documentation/Library?id=IAction) help section.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-changenavigation/ (linkStyle))
    */
    addNavigationItem(val: IAction): Action;
    /**
     * Gets or sets the 'Start' button caption.
     * The 'Start' button is shown on the started page. Set the `firstPageIsStarted` property to `true`, to display the started page.
     * @see firstPageIsStarted
     * @see locale
     */
    get startSurveyText(): string;
    set startSurveyText(newValue: string);
    get locStartSurveyText(): LocalizableString;
    /**
     * Gets or sets the 'Prev' button caption.
     * @see locale
     */
    get pagePrevText(): string;
    set pagePrevText(newValue: string);
    get locPagePrevText(): LocalizableString;
    /**
     * Gets or sets the 'Next' button caption.
     * @see locale
     */
    get pageNextText(): string;
    set pageNextText(newValue: string);
    get locPageNextText(): LocalizableString;
    /**
     *  Gets or sets the 'Complete' button caption.
     * @see locale
     */
    get completeText(): string;
    set completeText(newValue: string);
    get locCompleteText(): LocalizableString;
    /**
     * Gets or sets a caption for the Preview button.
     * @see showPreviewBeforeComplete
     * @see showPreview
     * @see editText
     */
    get previewText(): string;
    set previewText(newValue: string);
    get locPreviewText(): LocalizableString;
    /**
     * Gets or sets a caption for the Edit button displayed when the survey shows a [preview of given answers](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#preview-page).
     * @see showPreviewBeforeComplete
     * @see cancelPreview
     * @see previewText
     */
    get editText(): string;
    set editText(newValue: string);
    get locEditText(): LocalizableString;
    getElementTitleTagName(element: Base, tagName: string): string;
    /**
     * Set the pattern for question title. Default is "numTitleRequire", 1. What is your name? *,
     * You can set it to numRequireTitle: 1. * What is your name?
     * You can set it to requireNumTitle: * 1. What is your name?
     * You can set it to numTitle (remove require symbol completely): 1. What is your name?
     * @see QuestionModel.title
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-processtext/ (linkStyle))
     */
    get questionTitlePattern(): string;
    set questionTitlePattern(val: string);
    getQuestionTitlePatternOptions(): Array<any>;
    get questionTitleTemplate(): string;
    set questionTitleTemplate(value: string);
    private getNewTitlePattern;
    private getNewQuestionTitleElement;
    get locQuestionTitleTemplate(): LocalizableString;
    getUpdatedQuestionTitle(question: Question, title: string): string;
    getUpdatedQuestionNo(question: Question, no: string): string;
    /**
     * Gets or sets whether the survey displays page numbers on pages titles.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
     */
    get showPageNumbers(): boolean;
    set showPageNumbers(value: boolean);
    /**
     * Gets or sets a value that specifies how the question numbers are displayed.
     *
     * The following options are available:
     *
     * - `on` - display question numbers
     * - `onpage` - display question numbers, start numbering on every page
     * - `off` - turn off the numbering for questions titles
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-options/ (linkStyle))
     */
    get showQuestionNumbers(): string | boolean;
    set showQuestionNumbers(value: string | boolean);
    /**
     * Gets or sets the survey progress bar position.
     *
     * The following options are available:
     *
     * - `off` (default) - don't show progress bar
     * - `top` - show progress bar in the top
     * - `bottom` - show progress bar in the bottom
     * - `both` - show progress bar in both sides: top and bottom.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/navigation-default/ (linkStyle))
     */
    get showProgressBar(): string;
    set showProgressBar(newValue: string);
    /**
     * Gets or sets the type of info in the progress bar.
     *
     * The following options are available:
     *
     * - `pages` (default),
     * - `questions`,
     * - `requiredQuestions`,
     * - `correctQuestions`,
     * - `buttons`
     *
     * [View Demo](https://surveyjs.io/form-library/examples/navigation-buttons/ (linkStyle))
     */
    get progressBarType(): string;
    set progressBarType(newValue: string);
    get isShowProgressBarOnTop(): boolean;
    get isShowProgressBarOnBottom(): boolean;
    getProgressCssClasses(): string;
    private canShowProresBar;
    get processedTitle(): string;
    /**
     * Gets or sets question title location relative to the input field: `"top"`, `"bottom"`, or `"left"`.
     *
     * > Certain question types (Matrix, Multiple Text) do not support the `"left"` value. For them, the `"top"` value is used.
     *
     * You can override this setting if you specify the `questionTitleLocation` property for an [individual page](https://surveyjs.io/form-library/documentation/pagemodel#questionTitleLocation) or [panel](https://surveyjs.io/form-library/documentation/panelmodel#questionTitleLocation) or set the `titleLocation` property for a [specific question](https://surveyjs.io/form-library/documentation/question#titleLocation).
     */
    get questionTitleLocation(): string;
    set questionTitleLocation(value: string);
    updateElementCss(reNew?: boolean): void;
    /**
     * Gets or sets the error message position.
     *
     * The following options are available:
     *
     * - `top` - to show question error(s) over the question,
     * - `bottom` - to show question error(s) under the question.
     */
    get questionErrorLocation(): string;
    set questionErrorLocation(value: string);
    /**
     * Gets or sets the question description position. The default value is `underTitle`.
     *
     * The following options are available:
     *
     * - `underTitle` - show question description under the question title,
     * - `underInput` - show question description under the question input instead of question title.
     */
    get questionDescriptionLocation(): string;
    set questionDescriptionLocation(value: string);
    /**
     * Gets or sets the survey edit mode.
     *
     * The following options are available:
     *
     * - `edit` (default) - make a survey editable,
     * - `display` - make a survey read-only.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-displaymode/ (linkStyle))
     */
    get mode(): string;
    set mode(value: string);
    private onModeChanged;
    /**
     * Gets or sets an object with survey results. You can set this property with an object of the following structure:
     *
     * ```js
     * {
     *   question1Name: question1Value,
     *   question2Name: question2Value,
     *   // ...
     * }
     * ```
     *
     * When you set this property in code, the new object overrides the old object that may contain default question values and entered data. If you want to *merge* the new and old objects, call the [`mergeData(newDataObj)`](https://surveyjs.io/form-library/documentation/surveymodel#mergeData) method.
     *
     * If you assign a new object while a respondent takes the survey, set the [`currentPageNo`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#currentPageNo) property to 0 to start the survey from the beginning. This will also cause the survey to re-evaluate the [`visibleIf`](https://surveyjs.io/form-library/documentation/api-reference/question#visibleIf), [`enableIf`](https://surveyjs.io/form-library/documentation/api-reference/question#enableIf), and other [expressions](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#expressions).
     * @see setValue
     * @see getValue
     */
    get data(): any;
    set data(data: any);
    /**
     * Merges a specified data object with the object from the [`data`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#data) property.
     *
     * Refer to the following help topic for more information: [Merge Question Values](https://surveyjs.io/form-library/documentation/design-survey/merge-question-values).
     *
     * @param data A data object to merge. It should have the following structure: `{ questionName: questionValue, ... }`
     * @see setValue
     */
    mergeData(data: any): void;
    setDataCore(data: any): void;
    getStructuredData(includePages?: boolean, level?: number): any;
    setStructuredData(data: any, doMerge?: boolean): void;
    private collectDataFromPanel;
    private onEditingObjPropertyChanged;
    get editingObj(): Base;
    set editingObj(val: Base);
    get isEditingSurveyElement(): boolean;
    private setCalculatedValuesIntoResult;
    getAllValues(): any;
    /**
     * Returns survey results as an array of objects in which the question name, title, value, and other parameters are stored as individual properties.
     *
     * If a question can have more than one value (Matrix, Multiple Text), its object enables the `isNode` flag and stores information about these values in the `data` property. Refer to the following help topic for more information: [Access Full Survey Results](https://surveyjs.io/form-library/documentation/handle-survey-results-access#access-full-survey-results).
     *
     * If you want to skip empty answers, pass an object with the `includeEmpty` property set to `false`.
     */
    getPlainData(options?: {
        includeEmpty?: boolean;
        includeQuestionTypes?: boolean;
        includeValues?: boolean;
        calculations?: Array<{
            propertyName: string;
        }>;
    }): Array<IQuestionPlainData>;
    getFilteredValues(): any;
    private addCalculatedValuesIntoFilteredValues;
    getFilteredProperties(): any;
    private getValuesKeys;
    getDataValueCore(valuesHash: any, key: string): any;
    setDataValueCore(valuesHash: any, key: string, value: any): void;
    deleteDataValueCore(valuesHash: any, key: string): void;
    valueHashGetDataCallback: (valuesHash: any, key: string) => any;
    valueHashSetDataCallback: (valuesHash: any, key: string, value: any) => void;
    valueHashDeleteDataCallback: (valuesHash: any, key: string) => void;
    private getDataFromValueHash;
    private setDataToValueHash;
    private deleteDataFromValueHash;
    /**
     * An object with all comment values.
     * @see Question.showCommentArea
     * @see storeOthersAsComment
     */
    get comments(): any;
    /**
     * Returns an array of visible pages without the start page.
     *
     * To get an array of all pages, use the [`pages`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#pages) property. If all pages are visible, the `pages` and `visiblePages` arrays are identical.
     * @see [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility)
     */
    get visiblePages(): Array<PageModel>;
    private isPageInVisibleList;
    /**
     * Returns `true` if the survey contains no pages. The survey is empty.
     */
    get isEmpty(): boolean;
    get PageCount(): number;
    /**
     * Returns a total number of survey pages.
     *
     * To get the number of visible pages, use the [`visiblePageCount`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#visiblePageCount) property.
     * @see pages
     */
    get pageCount(): number;
    /**
     * Returns the number of visible survey pages.
     *
     * To get a total number of survey pages, use the [`pageCount`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#pageCount) property.
     * @see visiblePages
     * @see [Conditional Visibility](https://surveyjs.io/form-library/documentation/design-survey/conditional-logic#conditional-visibility)
     */
    get visiblePageCount(): number;
    /**
     * Returns the start page. Applies only if the [`firstPageIsStarted`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#firstPageIsStarted) property is set to `true`.
     *
     * Refer to the following help topic for more information: [Start Page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
     * @see firstPageIsStarted
     * @see activePage
     */
    get startedPage(): PageModel;
    /**
     * Gets or sets the current page.
     *
     * If you want to change the current page, set this property to a `PageModel` object. You can get this object in different ways. For example, you can call the [`getPageByName()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#getPageByName) method to obtain a `PageModel` object with a specific name:
     *
     * ```js
     * survey.currentPage = survey.getPageByName("my-page-name");
     * ```
     *
     * Alternatively, you can change the current page if you set the [`currentPageNo`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#currentPageNo) property to the index of the required page.
     *
     * The `currentPage` property does not return the start page even if it is current. Use the [`activePage`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#activePage) property instead if your survey contains a start page.
     */
    get currentPage(): any;
    set currentPage(value: any);
    private updateCurrentPage;
    private get isCurrentPageAvailable();
    private isPageExistsInSurvey;
    /**
     * Returns [`startedPage`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#startedPage) if the survey currently displays a start page; otherwise, returns [`currentPage`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#currentPage).
     * @see startedPage
     * @see currentPage
     * @see firstPageIsStarted
     */
    get activePage(): any;
    /**
     * The started page is showing right now. survey state equals to "starting"
     */
    get isShowStartingPage(): boolean;
    /**
     * Survey is showing a page right now. It is in "running", "preview" or starting state.
     */
    get isShowingPage(): boolean;
    private updateActivePage;
    private onStateAndCurrentPageChanged;
    private getPageByObject;
    /**
     * A zero-based index of the current page in the [`visiblePages`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#visiblePages) array.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-editprevious/ (linkStyle))
     * @see visiblePages
     */
    get currentPageNo(): number;
    set currentPageNo(value: number);
    /**
     * Specifies the sort order of questions in the survey.
     *
     * Possible values:
     *
     * - `"initial"` (default) - Preserves the original order of questions.
     * - `"random"` - Displays questions in random order.
     *
     * You can override this property for individual pages and panels.
     * @see PageModel.questionsOrder
     * @see PanelModel.questionsOrder
     */
    get questionsOrder(): string;
    set questionsOrder(val: string);
    /**
     * Sets the input focus to the first question with the input field.
     */
    focusFirstQuestion(): void;
    scrollToTopOnPageChange(doScroll?: boolean): void;
    /**
     * Returns the current survey state.
     *
     * Possible values:
     *
     * - `"loading"` - The survey is being loaded from a JSON schema.
     * - `"empty"` - The survey has no elements to display.
     * - `"starting"` - The survey displays a [start page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
     * - `"running"` - A respondent is taking the survey.
     * - `"preview"` - A respondent is [previewing](https://surveyjs.io/form-library/examples/survey-showpreview/) answers before submitting them.
     * - `"completed"` - A respondent has completed the survey and submitted the results.
     */
    get state(): string;
    private updateState;
    private calcState;
    private get isCompleted();
    private set isCompleted(value);
    private get isShowingPreview();
    private set isShowingPreview(value);
    private get isStartedState();
    private set isStartedState(value);
    private get isCompletedBefore();
    private set isCompletedBefore(value);
    private get isLoading();
    private set isLoading(value);
    get completedState(): string;
    get completedStateText(): string;
    protected setCompletedState(value: string, text: string): void;
    notify(message: string, type: string): void;
    /**
     * Resets the survey [`state`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#state) and, optionally, [`data`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#data). If `state` is `"completed"`, it becomes `"running"`.
     * @param clearData *Optional.* Specifies whether to clear survey data. Default value: `true`.
     * @param goToFirstPage *Optional.* Specifies whether to switch the survey to the first page. Default value: `true`.
     */
    clear(clearData?: boolean, goToFirstPage?: boolean): void;
    mergeValues(src: any, dest: any): void;
    private updateValuesWithDefaults;
    protected updateCustomWidgets(page: PageModel): void;
    protected currentPageChanging(newValue: PageModel, oldValue: PageModel): boolean;
    protected currentPageChanged(newValue: PageModel, oldValue: PageModel): void;
    private createPageChangeEventOptions;
    /**
     * Returns the progress that a user made while going through the survey.
     * It depends from progressBarType property
     * @see progressBarType
     * @see progressValue
     */
    getProgress(): number;
    /**
     * Returns the progress that a user made while going through the survey.
     * It depends from progressBarType property
     * @see progressBarType
     */
    get progressValue(): number;
    /**
     * Returns the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') position.
     */
    get isNavigationButtonsShowing(): string;
    /**
     * Returns true if the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') are shows on top.
     */
    get isNavigationButtonsShowingOnTop(): boolean;
    /**
     * Returns true if the navigation buttons (i.e., 'Prev', 'Next', or 'Complete' and 'Preview') are shows on bottom.
     */
    get isNavigationButtonsShowingOnBottom(): boolean;
    private getIsNavigationButtonsShowingOn;
    /**
     * Returns `true` if the survey is in edit mode.
     * @see mode
     */
    get isEditMode(): boolean;
    /**
     * Returns `true` if the survey is in display mode or in preview mode.
     * @see mode
     * @see showPreviewBeforeComplete
     */
    get isDisplayMode(): boolean;
    get isUpdateValueTextOnTyping(): boolean;
    /**
     * Returns `true` if the survey is in design mode. It is used by SurveyJS Editor.
     * @see setDesignMode
     */
    get isDesignMode(): boolean;
    private _isDesignMode;
    /**
     * Sets the survey into design mode.
     * @param value use true to set the survey into the design mode.
     */
    setDesignMode(value: boolean): void;
    /**
     * Gets or sets whether to show all elements in the survey, regardless their visibility. The default value is `false`.
     */
    get showInvisibleElements(): boolean;
    set showInvisibleElements(val: boolean);
    private updateAllElementsVisibility;
    get areInvisibleElementsShowing(): boolean;
    get areEmptyElementsHidden(): boolean;
    /**
     * Returns `true`, if a user has already completed the survey in this browser and there is a cookie about it. Survey goes to `completed` state if the function returns `true`.
     * @see cookieName
     * @see setCookie
     * @see deleteCookie
     * @see state
     */
    get hasCookie(): boolean;
    /**
     * Set the cookie with `cookieName` in user's browser. It is done automatically on survey complete if the `cookieName` property value is not empty.
     * @see cookieName
     * @see hasCookie
     * @see deleteCookie
     */
    setCookie(): void;
    /**
     * Deletes the cookie with `cookieName` from the browser.
     * @see cookieName
     * @see hasCookie
     * @see setCookie
     */
    deleteCookie(): void;
    /**
     * Gets or sets whether the survey must ignore validation like required questions and others, on `nextPage` and `completeLastPage` function calls. The default is `false`.
     * @see nextPage
     * @see completeLastPage
     * @see mode
     */
    ignoreValidation: boolean;
    /**
     * Navigates user to the next page.
     *
     * Returns `false` in the following cases:
     *
     * - if the current page is the last page.
     * - if the current page contains errors (for example, a required question is empty).
     * @see isCurrentPageValid
     * @see prevPage
     * @see completeLastPage
     */
    nextPage(): boolean;
    private hasErrorsOnNavigate;
    private asyncValidationQuesitons;
    private checkForAsyncQuestionValidation;
    private clearAsyncValidationQuesitons;
    private onCompletedAsyncQuestionValidators;
    get isCurrentPageHasErrors(): boolean;
    /**
     * Returns `true` if the current page does not contain errors.
     * @see currentPage
     */
    get isCurrentPageValid(): boolean;
    hasCurrentPageErrors(onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    /**
     * Validates all questions on the current page and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validateCurrentPage` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see currentPage
     * @see validate
     * @see validateCurrentPage
     */
    validateCurrentPage(onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    hasPageErrors(page?: PageModel, onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    /**
     * Validates all questions on a specified page and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validatePage` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param page Pass the `PageModel` that you want to validate. You can pass `undefined` to validate the [`activePage`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#activePage).
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see validate
     * @see validateCurrentPage
     */
    validatePage(page?: PageModel, onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    hasErrors(fireCallback?: boolean, focusOnFirstError?: boolean, onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    /**
     * Validates all questions and returns `false` if the validation fails.
     *
     * If you use validation expressions and at least one of them calls an async function, the `validate` method returns `undefined`. In this case, you should pass a callback function as the `onAsyncValidation` parameter. The function's `hasErrors` Boolean parameter will contain the validation result.
     * @param fireCallback *Optional.* Pass `false` if you do not want to show validation errors in the UI.
     * @param focusOnFirstError *Optional.* Pass `true` if you want to focus the first question with a validation error. The survey will be switched to the page that contains this question if required.
     * @param onAsyncValidation *Optional.* Pass a callback function. It accepts a Boolean `hasErrors` parameter that equals `true` if the validation fails or `false` otherwise.
     * @see validateCurrentPage
     * @see validatePage
     */
    validate(fireCallback?: boolean, focusOnFirstError?: boolean, onAsyncValidation?: (hasErrors: boolean) => void): boolean;
    /**
     * Checks whether survey elements (pages, panels, and questions) have unique question names.
     * You can check for unique names for individual page and panel (and all their elements) or a question.
     * If the parameter is not specified, then a survey checks that all its elements have unique names.
     * @param element page, panel or question, it is `null` by default, that means all survey elements will be checked
     */
    ensureUniqueNames(element?: ISurveyElement): void;
    private ensureUniqueName;
    private ensureUniquePageName;
    private ensureUniquePanelName;
    private ensureUniqueQuestionName;
    private ensureUniqueElementName;
    private getNewName;
    private checkIsCurrentPageHasErrors;
    private checkIsPageHasErrors;
    private fireValidatedErrorsOnPage;
    /**
     * Navigates user to a previous page. If the current page is the first page, `prevPage` returns `false`. `prevPage` does not perform any checks, required questions can be empty.
     * @see isFirstPage
     */
    prevPage(): boolean;
    /**
     * Completes the survey if it currently displays the last page and the page contains no validation errors. If both these conditions are met, this method returns `true`; otherwise, `false`.
     *
     * If you want to complete the survey regardless of the current page and validation errors, use the [`doComplete()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#completeLastPage) event.
     * @see isCurrentPageValid
     * @see nextPage
     */
    completeLastPage(): boolean;
    private isNavigationButtonPressed;
    navigationMouseDown(): boolean;
    private resetNavigationButton;
    private mouseDownPage;
    nextPageUIClick(): boolean;
    nextPageMouseDown(): boolean;
    /**
     * Displays a [preview of given answers](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#preview-page). Returns `false` if the preview cannot be displayed because of validation errors.
     * @see cancelPreview
     * @see showPreviewBeforeComplete
     * @see onShowingPreview
     * @see state
     */
    showPreview(): boolean;
    private showPreviewCore;
    /**
     * Cancels a [preview of given answers](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#preview-page) and switches the survey to the page specified by the `curPage` parameter.
     * @param curPage A new current page. If you do not specify this parameter, the survey displays the last page.
     * @see showPreview
     * @see showPreviewBeforeComplete
     * @see state
     */
    cancelPreview(curPage?: any): void;
    cancelPreviewByPage(panel: IPanel): any;
    protected doCurrentPageComplete(doComplete: boolean): boolean;
    private doCurrentPageCompleteCore;
    get isSinglePage(): boolean;
    set isSinglePage(val: boolean);
    /**
     * Specifies how to distribute survey elements between pages.
     *
     * Possible values:
     *
     * - `"singlePage"` - Combines all survey pages into a single page.
     * - `"questionPerPage"` - Creates a separate page for every question.
     * - `"standard"` (default) - Retains the original structure specified in the JSON schema.
     */
    get questionsOnPageMode(): string;
    set questionsOnPageMode(val: string);
    /**
     * Gets or sets a Boolean value that specifies whether the first page is a start page.
     *
     * Refer to the following help topic for more information: [Start Page](https://surveyjs.io/form-library/documentation/design-survey/create-a-multi-page-survey#start-page).
     * @see startedPage
     * @see activePage
     */
    get firstPageIsStarted(): boolean;
    set firstPageIsStarted(val: boolean);
    isPageStarted(page: IPage): boolean;
    /**
     * Allows respondents to preview answers before they are submitted.
     *
     * Possible values:
     *
     * - `"showAllQuestions"` - Displays all questions in the preview.
     * - `"showAnsweredQuestions"` - Displays only answered questions in the preview.
     * - `"noPreview"` (default) - Hides the preview.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/survey-showpreview/ (linkStyle))
     * @see showPreview
     * @see cancelPreview
     */
    get showPreviewBeforeComplete(): string;
    set showPreviewBeforeComplete(val: string);
    get isShowPreviewBeforeComplete(): boolean;
    protected onFirstPageIsStartedChanged(): void;
    private runningPages;
    private onShowingPreviewChanged;
    private origionalPages;
    protected onQuestionsOnPageModeChanged(oldValue: string): void;
    private restoreOrigionalPages;
    private getPageStartIndex;
    private setupPagesForPageModes;
    private createPagesForQuestionOnPageMode;
    private createSinglePage;
    private createPagesForEveryQuestion;
    /**
     * Gets whether the current page is the first one.
     */
    get isFirstPage(): boolean;
    /**
     * Gets whether the current page is the last one.
     */
    get isLastPage(): boolean;
    private updateButtonsVisibility;
    get isShowPrevButton(): boolean;
    get isShowNextButton(): boolean;
    get isCompleteButtonVisible(): boolean;
    get isPreviewButtonVisible(): boolean;
    get isCancelPreviewButtonVisible(): boolean;
    private updateIsFirstLastPageState;
    private calcIsShowPrevButton;
    private calcIsShowNextButton;
    calcIsCompleteButtonVisible(): boolean;
    private calcIsPreviewButtonVisible;
    private calcIsCancelPreviewButtonVisible;
    private get firstVisiblePage();
    private get lastVisiblePage();
    /**
     * Completes the survey.
     *
     * When you call this method, Form Library performs the following actions:
     *
     * 1. Saves a cookie if the [`cookieName`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#cookieName) property is set.
     * 1. Switches the survey [`state`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#state) to `"completed"`.
     * 1. Raises the [`onComplete`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onComplete) event.
     * 1. Navigates the user to a URL specified by the [`navigateToUrl`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#navigateToUrl) or [`navigateToUrlOnCondition`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#navigateToUrlOnCondition) property.
     * 1. Calls the [`sendResult()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#sendResult) method if Form Library works with the [SurveyJS Service](https://api.surveyjs.io/).
     *
     * The `doComplete()` method completes the survey regardless of validation errors and the current page. If you need to ensure that survey results are valid and full, call the [`completeLastPage()`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#completeLastPage) method instead.
     *
     * @param isCompleteOnTrigger For internal use.
     * @returns `false` if survey completion is cancelled within the [`onCompleting`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#onCompleting) event handler; otherwise, `true`.
     * @see surveyPostId
     */
    doComplete(isCompleteOnTrigger?: boolean): boolean;
    private saveDataOnComplete;
    private checkOnCompletingEvent;
    /**
     * Starts the survey. Changes the survey mode from "starting" to "running". Call this function if your survey has a start page, otherwise this function does nothing.
     * @see firstPageIsStarted
     */
    start(): boolean;
    /**
     * Gets whether the question values on the current page are validating on the server at the current moment.
     * @see onServerValidateQuestions
     */
    get isValidatingOnServer(): boolean;
    private serverValidationEventCount;
    private setIsValidatingOnServer;
    private createServerValidationOptions;
    protected onIsValidatingOnServerChanged(): void;
    protected doServerValidation(doComplete: boolean, isPreview?: boolean): boolean;
    private completeServerValidation;
    protected doNextPage(): void;
    setCompleted(): void;
    canBeCompleted(): void;
    /**
     * Returns the HTML content for the complete page.
     * @see completedHtml
     */
    get processedCompletedHtml(): string;
    /**
     * Returns the HTML content, that is shown to a user that had completed the survey before.
     * @see completedHtml
     * @see cookieName
     */
    get processedCompletedBeforeHtml(): string;
    /**
     * Returns the HTML content, that is shows when a survey loads the survey JSON.
     */
    get processedLoadingHtml(): string;
    getProgressInfo(): IProgressInfo;
    /**
     * Returns the text for the current progress.
     */
    get progressText(): string;
    private isCalculatingProgressText;
    updateProgressText(onValueChanged?: boolean): void;
    getProgressText(): string;
    private getProgressTextCore;
    rootCss: string;
    getRootCss(): string;
    private resizeObserver;
    afterRenderSurvey(htmlElement: any): void;
    private processResponsiveness;
    destroyResizeObserver(): void;
    updateQuestionCssClasses(question: Question, cssClasses: any): void;
    updatePanelCssClasses(panel: PanelModel, cssClasses: any): void;
    updatePageCssClasses(page: PageModel, cssClasses: any): void;
    updateChoiceItemCss(question: IQuestion, options: any): void;
    private isFirstPageRendering;
    private isCurrentPageRendering;
    afterRenderPage(htmlElement: HTMLElement): void;
    afterRenderHeader(htmlElement: HTMLElement): void;
    afterRenderQuestion(question: Question, htmlElement: HTMLElement): void;
    afterRenderQuestionInput(question: Question, htmlElement: HTMLElement): void;
    afterRenderPanel(panel: IElement, htmlElement: HTMLElement): void;
    whenQuestionFocusIn(question: Question): void;
    whenPanelFocusIn(panel: PanelModel): void;
    private rebuildQuestionChoices;
    canChangeChoiceItemsVisibility(): boolean;
    getChoiceItemVisibility(question: Question, item: any, val: boolean): boolean;
    loadQuestionChoices(options: {
        question: Question;
        filter: string;
        skip: number;
        take: number;
        setItems: (items: Array<any>, totalCount: number) => void;
    }): void;
    getChoiceDisplayValue(options: {
        question: Question;
        values: Array<any>;
        setItems: (displayValues: Array<string>) => void;
    }): void;
    matrixBeforeRowAdded(options: any): void;
    matrixRowAdded(question: QuestionMatrixDynamicModel, row: any): void;
    matrixColumnAdded(question: Question, column: any): void;
    multipleTextItemAdded(question: QuestionMultipleTextModel, item: any): void;
    getQuestionByValueNameFromArray(valueName: string, name: string, index: number): IQuestion;
    matrixRowRemoved(question: QuestionMatrixDynamicModel, rowIndex: number, row: any): void;
    matrixRowRemoving(question: QuestionMatrixDynamicModel, rowIndex: number, row: any): boolean;
    matrixAllowRemoveRow(question: QuestionMatrixDynamicModel, rowIndex: number, row: any): boolean;
    matrixCellCreating(question: QuestionMatrixDropdownModelBase, options: any): void;
    matrixCellCreated(question: QuestionMatrixDropdownModelBase, options: any): void;
    matrixAfterCellRender(question: QuestionMatrixDropdownModelBase, options: any): void;
    matrixCellValueChanged(question: QuestionMatrixDropdownModelBase, options: any): void;
    matrixCellValueChanging(question: QuestionMatrixDropdownModelBase, options: MatrixCellValueChangingEvent): void;
    get isValidateOnValueChanging(): boolean;
    get isValidateOnValueChanged(): boolean;
    matrixCellValidate(question: QuestionMatrixDropdownModelBase, options: MatrixCellValidateEvent): SurveyError;
    dynamicPanelAdded(question: QuestionPanelDynamicModel, panelIndex?: number, panel?: PanelModel): void;
    dynamicPanelRemoved(question: QuestionPanelDynamicModel, panelIndex: number, panel: PanelModel): void;
    dynamicPanelRemoving(question: QuestionPanelDynamicModel, panelIndex: number, panel: PanelModel): boolean;
    dynamicPanelItemValueChanged(question: IQuestion, options: any): void;
    dragAndDropAllow(options: DragDropAllowEvent): boolean;
    elementContentVisibilityChanged(element: ISurveyElement): void;
    getUpdatedPanelFooterActions(panel: PanelModel, actions: Array<IAction>, question?: QuestionPanelDynamicModel): Array<IAction>;
    getUpdatedElementTitleActions(element: ISurveyElement, titleActions: Array<IAction>): Array<IAction>;
    private getUpdatedQuestionTitleActions;
    private getUpdatedPanelTitleActions;
    private getUpdatedPageTitleActions;
    getUpdatedMatrixRowActions(question: QuestionMatrixDropdownModelBase, row: any, actions: Array<IAction>): IAction[];
    scrollElementToTop(element: ISurveyElement, question: Question, page: PageModel, id: string): any;
    /**
     * Uploads a file to server.
     * @param question a file question object
     * @param name a question name
     * @param files files to upload
     * @param uploadingCallback a call back function to get the status on uploading the files
     */
    uploadFiles(question: QuestionFileModel, name: string, files: File[], uploadingCallback: (status: string, data: any) => any): void;
    /**
     * Downloads a file from server
     * @param name a question name
     * @param fileValue a single file question value
     * @param callback a call back function to get the status on downloading the file and the downloaded file content
     */
    downloadFile(question: QuestionFileModel, questionName: string, fileValue: any, callback: (status: string, data: any) => any): void;
    clearFiles(question: QuestionFileModel, name: string, value: any, fileName: string, callback: (status: string, data: any) => any): void;
    updateChoicesFromServer(question: QuestionSelectBase, choices: Array<ItemValue>, serverResult: any): Array<ItemValue>;
    loadedChoicesFromServer(question: IQuestion): void;
    protected createSurveyService(): dxSurveyService;
    protected uploadFilesCore(name: string, files: File[], uploadingCallback: (status: string, data: any) => any): void;
    getPage(index: number): PageModel;
    /**
     * Adds an existing page to the survey.
     * @param page A page to add.
     * @param index An index at which to insert the page. If you do not specify this parameter, the page will be added to the end.
     * @see addNewPage
     * @see createNewPage
     */
    addPage(page: PageModel, index?: number): void;
    /**
     * Creates a new page and adds it to the survey.
     * @param name A page name. If you do not specify this parameter, it will be generated automatically.
     * @param index An index at which to insert the page. If you do not specify this parameter, the page will be added to the end.
     * @returns The created and added page.
     * @see addPage
     * @see createNewPage
     */
    addNewPage(name?: string, index?: number): PageModel;
    /**
     * Removes a page from a survey.
     * @param page
     */
    removePage(page: PageModel): void;
    /**
     * Returns a question by its name.
     * @param name a question name
     * @param caseInsensitive
     * @see getQuestionByValueName
     */
    getQuestionByName(name: string, caseInsensitive?: boolean): Question;
    findQuestionByName(name: string): IQuestion;
    /**
     * Returns a question by its value name
     * @param valueName a question name
     * @param caseInsensitive
     * @see getQuestionByName
     * @see getQuestionsByValueName
     * @see Question.valueName
     */
    getQuestionByValueName(valueName: string, caseInsensitive?: boolean): IQuestion;
    /**
     * Returns all questions by their valueName. name property is used if valueName property is empty.
     * @param valueName a question name
     * @param caseInsensitive
     * @see getQuestionByName
     * @see getQuestionByValueName
     * @see Question.valueName
     */
    getQuestionsByValueName(valueName: string, caseInsensitive?: boolean): Array<Question>;
    getCalculatedValueByName(name: string): CalculatedValue;
    /**
     * Gets a list of questions by their names.
     * @param names an array of question names
     * @param caseInsensitive
     */
    getQuestionsByNames(names: string[], caseInsensitive?: boolean): IQuestion[];
    /**
     * Returns a page on which an element (question or panel) is placed.
     * @param element Question or Panel
     */
    getPageByElement(element: IElement): PageModel;
    /**
     * Returns a page on which a question is located.
     * @param question
     */
    getPageByQuestion(question: IQuestion): PageModel;
    /**
     * Returns a page by it's name.
     * @param name
     */
    getPageByName(name: string): PageModel;
    /**
     * Returns a list of pages by their names.
     * @param names a list of page names
     */
    getPagesByNames(names: string[]): PageModel[];
    /**
     * Returns a list of all questions in a survey.
     * @param visibleOnly set it `true`, if you want to get only visible questions
     */
    getAllQuestions(visibleOnly?: boolean, includingDesignTime?: boolean): Array<Question>;
    /**
     * Returns quiz questions. All visible questions that has input(s) widgets.
     * @see getQuizQuestionCount
     */
    getQuizQuestions(): Array<IQuestion>;
    /**
     * Returns a panel by its name.
     * @param name a panel name
     * @param caseInsensitive
     * @see getQuestionByName
     */
    getPanelByName(name: string, caseInsensitive?: boolean): PanelModel;
    /**
     * Returns a list of all survey's panels.
     */
    getAllPanels(visibleOnly?: boolean, includingDesignTime?: boolean): Array<IPanel>;
    /**
     * Creates and returns a new page but does not add it to the survey.
     *
     * Call the [`addPage(page)`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#addPage) method to add the created page to the survey later or the [`addNewPage(name, index)`](https://surveyjs.io/form-library/documentation/api-reference/survey-data-model#addNewPage) method to create _and_ add a page to the survey.
     * @see addPage
     * @see addNewPage
     */
    createNewPage(name: string): PageModel;
    protected questionOnValueChanging(valueName: string, newValue: any): any;
    protected updateQuestionValue(valueName: string, newValue: any): void;
    private checkQuestionErrorOnValueChanged;
    private checkQuestionErrorOnValueChangedCore;
    private checkErrorsOnValueChanging;
    protected notifyQuestionOnValueChanged(valueName: string, newValue: any): void;
    private isRunningElementsBindings;
    private updateVisibleIndexAfterBindings;
    private checkElementsBindings;
    private notifyElementsOnAnyValueOrVariableChanged;
    private updateAllQuestionsValue;
    private notifyAllQuestionsOnValueChanged;
    private checkOnPageTriggers;
    private getCurrentPageQuestions;
    private isTriggerIsRunning;
    private triggerValues;
    private triggerKeys;
    private checkTriggers;
    private doElementsOnLoad;
    private conditionValues;
    private get isRunningConditions();
    private isValueChangedOnRunningCondition;
    private conditionRunnerCounter;
    private conditionUpdateVisibleIndexes;
    private conditionNotifyElementsOnAnyValueOrVariableChanged;
    private runConditions;
    private runConditionOnValueChanged;
    private runConditionsCore;
    private checkIfNewPagesBecomeVisible;
    /**
     * Sends a survey result to the [api.surveyjs.io](https://api.surveyjs.io) service.
     * @param postId [api.surveyjs.io](https://api.surveyjs.io) service postId
     * @param clientId Typically a customer e-mail or an identifier
     * @param isPartialCompleted Set it to `true` if the survey is not completed yet and the results are intermediate
     * @see surveyPostId
     * @see clientId
     */
    sendResult(postId?: string, clientId?: string, isPartialCompleted?: boolean): void;
    /**
     * Calls the [api.surveyjs.io](https://api.surveyjs.io) service and, on callback, fires the `onGetResult` event with all answers that your users made for a question.
     * @param resultId [api.surveyjs.io](https://api.surveyjs.io) service resultId
     * @param name The question name
     * @see onGetResult
     */
    getResult(resultId: string, name: string): void;
    /**
     * Loads the survey JSON from the [api.surveyjs.io](https://api.surveyjs.io) service.
     * If `clientId` is not `null` and a user had completed a survey before, the survey switches to `completedbefore` state.
     * @param surveyId [api.surveyjs.io](https://api.surveyjs.io) service surveyId
     * @param clientId users' indentifier, for example an e-mail or a unique customer id in your web application.
     * @see state
     * @see onLoadedSurveyFromService
     */
    loadSurveyFromService(surveyId?: string, cliendId?: string): void;
    private loadSurveyFromServiceJson;
    protected onLoadingSurveyFromService(): void;
    protected onLoadSurveyFromService(): void;
    private resetVisibleIndexes;
    private updateVisibleIndexes;
    private updatePageVisibleIndexes;
    fromJSON(json: any): void;
    setJsonObject(jsonObj: any): void;
    private isEndLoadingFromJson;
    endLoadingFromJson(): void;
    private updateNavigationCss;
    private updateNavigationItemCssCallback;
    private updateNavigationBarCss;
    protected createNavigationBar(): ActionContainer;
    protected createNavigationActions(): Array<IAction>;
    protected onBeforeCreating(): void;
    protected onCreating(): void;
    private getProcessedTextValue;
    getBuiltInVariableValue(name: string): number;
    private getProcessedTextValueCore;
    private getProcessedValuesWithoutQuestion;
    private getFirstName;
    private reduceFirstName;
    private clearUnusedValues;
    hasVisibleQuestionByValueName(valueName: string): boolean;
    questionCountByValueName(valueName: string): number;
    private clearInvisibleQuestionValues;
    /**
     * Returns a variable value. Variable, unlike values, are not stored in the survey results.
     * @param name A variable name
     * @see SetVariable
     */
    getVariable(name: string): any;
    /**
     * Sets a variable value. Variable, unlike values, are not stored in the survey results.
     * @param name A variable name
     * @param newValue A variable new value
     * @see GetVariable
     */
    setVariable(name: string, newValue: any): void;
    /**
     * Returns all variables in the survey. Use setVariable function to create a new variable.
     * @see getVariable
     * @see setVariable
     */
    getVariableNames(): Array<string>;
    protected getUnbindValue(value: any): any;
    /**
     * Returns a question value (answer) by a question's name.
     * @param name A question name
     * @see data
     * @see setValue
     */
    getValue(name: string): any;
    /**
     * Sets a question value (answer). It runs all triggers and conditions (`visibleIf` properties).
     *
     * Goes to the next page if `goNextPageAutomatic` is `true` and all questions on the current page are answered correctly.
     * @param name A question name
     * @param newValue A new question value
     * @see data
     * @see getValue
     * @see PageModel.visibleIf
     * @see Question.visibleIf
     * @see goNextPageAutomatic
     */
    setValue(name: string, newQuestionValue: any, locNotification?: any, allowNotifyValueChanged?: boolean): void;
    private updateOnSetValue;
    private isValueEqual;
    protected doOnPageAdded(page: PageModel): void;
    protected doOnPageRemoved(page: PageModel): void;
    private generateNewName;
    protected tryGoNextPageAutomatic(name: string): void;
    /**
     * Returns the comment value.
     * @param name A comment's name.
     * @see setComment
     */
    getComment(name: string): string;
    /**
     * Sets a comment value.
     * @param name A comment name.
     * @param newValue A new comment value.
     * @see getComment
     */
    setComment(name: string, newValue: string, locNotification?: any): void;
    /**
     * Removes a value from the survey results.
     * @param {string} name The name of the value. Typically it is a question name.
     */
    clearValue(name: string): void;
    /**
     * Specifies whether to remove disabled choices from the value in [Dropdown](https://surveyjs.io/form-library/documentation/api-reference/dropdown-menu-model), [Checkboxes](https://surveyjs.io/form-library/documentation/api-reference/checkbox-question-model), and [Radio Button Group](https://surveyjs.io/form-library/documentation/api-reference/radio-button-question-model) questions.
     *
     * Default value: `false`
     *
     * > This property cannot be specified in the survey JSON schema. Use dot notation to specify it.
     */
    get clearValueOnDisableItems(): boolean;
    set clearValueOnDisableItems(val: boolean);
    get isClearValueOnHidden(): boolean;
    get isClearValueOnHiddenContainer(): boolean;
    questionVisibilityChanged(question: Question, newValue: boolean): void;
    pageVisibilityChanged(page: PageModel, newValue: boolean): void;
    panelVisibilityChanged(panel: PanelModel, newValue: boolean): void;
    questionCreated(question: Question): any;
    questionAdded(question: Question, index: number, parentPanel: any, rootPanel: any): void;
    questionRemoved(question: Question): void;
    questionRenamed(question: IQuestion, oldName: string, oldValueName: string): any;
    private questionHashes;
    private questionHashesClear;
    private questionHashesPanelAdded;
    private questionHashesAdded;
    private questionHashesRemoved;
    private questionHashAddedCore;
    private questionHashRemovedCore;
    panelAdded(panel: PanelModel, index: number, parentPanel: any, rootPanel: any): void;
    panelRemoved(panel: PanelModel): void;
    validateQuestion(question: Question): SurveyError;
    validatePanel(panel: PanelModel): SurveyError;
    processHtml(html: string, reason?: string): string;
    processText(text: string, returnDisplayValue: boolean): string;
    processTextEx(text: string, returnDisplayValue: boolean, doEncoding: boolean): any;
    private processTextCore;
    getSurveyMarkdownHtml(element: Question | PanelModel | PageModel | SurveyModel, text: string, name: string): string;
    getCorrectedAnswerCount(): number;
    /**
     * Returns an amount of corrected quiz answers.
     */
    getCorrectAnswerCount(): number;
    /**
     * Returns quiz question number. It may be different from `getQuizQuestions.length` because some widgets like matrix may have several questions.
     * @see getQuizQuestions
     */
    getQuizQuestionCount(): number;
    getInCorrectedAnswerCount(): number;
    /**
     * Returns an amount of incorrect quiz answers.
     */
    getInCorrectAnswerCount(): number;
    private getCorrectedAnswerCountCore;
    getCorrectedAnswers(): number;
    getInCorrectedAnswers(): number;
    /**
     * Gets or sets a timer panel position. The timer panel displays information about how much time an end user spends on a survey/page.
     *
     * The available options:
     * - `top` - display timer panel in the top.
     * - `bottom` - display timer panel in the bottom.
     * - `none` - do not display a timer panel.
     *
     * If the value is not equal to 'none', the survey calls the `startTimer()` method on survey rendering.
     * @see showTimerPanelMode
     * @see startTimer
     * @see stopTimer
     */
    get showTimerPanel(): string;
    set showTimerPanel(val: string);
    get isTimerPanelShowingOnTop(): boolean;
    get isTimerPanelShowingOnBottom(): boolean;
    /**
     * Gets or set a value that specifies whether the timer displays information for the page or for the entire survey.
     *
     * The available options:
     *
     * - `page` - show timer information for page
     * - `survey` - show timer information for survey
     *
     * Use the `onTimerPanelInfoText` event to change the default text.
     * @see showTimerPanel
     * @see onTimerPanelInfoText
     */
    get showTimerPanelMode(): string;
    set showTimerPanelMode(val: string);
    /**
      * Gets or sets a value that specifies how the survey width is calculated.
      *
      * The available options:
      *
      * - `static` - A survey has a fixed width that mostly depends upon the applied theme. Resizing a browser window does not affect the survey width.
      * - `responsive` - A survey takes all available horizontal space. A survey stretches or shrinks horizonally according to the screen size.
      * - `auto` - Depends on the question type and corresponds to the static or responsive mode.
    */
    get widthMode(): string;
    set widthMode(val: string);
    private calculatedWidthModeUpdater;
    setCalculatedWidthModeUpdater(): void;
    calculatedWidthMode: string;
    calculateWidthMode(): string;
    /**
     * A survey width in CSS values.
     *
     * Default value: `undefined` (the survey inherits the width from its container)
     */
    get width(): string;
    set width(val: string);
    get renderedWidth(): string;
    get timerInfo(): {
        spent: number;
        limit?: number;
    };
    get timerClock(): {
        majorText: string;
        minorText?: string;
    };
    get timerInfoText(): string;
    private getTimerInfo;
    private getTimerInfoText;
    private getTimerInfoPageText;
    private getTimerInfoSurveyText;
    private getDisplayClockTime;
    private getDisplayTime;
    get timerModel(): SurveyTimerModel;
    /**
     * Starts a timer that will calculate how much time end-user spends on the survey or on pages.
     * @see stopTimer
     * @see timeSpent
     */
    startTimer(): void;
    startTimerFromUI(): void;
    /**
     * Stops the timer.
     * @see startTimer
     * @see timeSpent
     */
    stopTimer(): void;
    /**
     * Gets or set the time in seconds an end user spends on the survey.
     * @see startTimer
     * @see PageModel.timeSpent
     */
    get timeSpent(): number;
    set timeSpent(val: number);
    /**
     * Gets or sets the maximum time in seconds that end user has to complete a survey. If the value is 0 or less, an end user has no time limit to finish a survey.
     * @see startTimer
     * @see maxTimeToFinishPage
     */
    get maxTimeToFinish(): number;
    set maxTimeToFinish(val: number);
    /**
     * Gets or sets the maximum time in seconds that end user has to complete a page in the survey. If the value is 0 or less, an end user has no time limit.
     *
     * You may override this value for every page.
     * @see startTimer
     * @see maxTimeToFinish
     * @see PageModel.maxTimeToFinish
     */
    get maxTimeToFinishPage(): number;
    set maxTimeToFinishPage(val: number);
    private getPageMaxTimeToFinish;
    private doTimer;
    get inSurvey(): boolean;
    getSurveyData(): ISurveyData;
    getSurvey(): ISurvey;
    getTextProcessor(): ITextProcessor;
    getObjects(pages: string[], questions: string[]): any[];
    setTriggerValue(name: string, value: any, isVariable: boolean): void;
    copyTriggerValue(name: string, fromName: string): void;
    triggerExecuted(trigger: Trigger): void;
    private isFocusingQuestion;
    private afterRenderPageTasks;
    private isMovingQuestion;
    startMovingQuestion(): void;
    stopMovingQuestion(): void;
    private needRenderIcons;
    private skippedPages;
    /**
     * Focus question by its name. If needed change the current page on the page where question is located.
     * Function returns false if there is no question with this name or question is invisible, otherwise it returns true.
     * @param name question name
     */
    focusQuestion(name: string): boolean;
    questionEditFinishCallback(question: Question, event: any): void;
    getElementWrapperComponentName(element: any, reason?: string): string;
    getQuestionContentWrapperComponentName(element: any): string;
    getRowWrapperComponentName(row: QuestionRowModel): string;
    getElementWrapperComponentData(element: any, reason?: string): any;
    getRowWrapperComponentData(row: QuestionRowModel): any;
    getItemValueWrapperComponentName(item: ItemValue, question: QuestionSelectBase): string;
    getItemValueWrapperComponentData(item: ItemValue, question: QuestionSelectBase): any;
    getMatrixCellTemplateData(cell: any): any;
    searchText(text: string): Array<IFindElement>;
    skeletonComponentName: string;
    getSkeletonComponentName(element: ISurveyElement): string;
    private layoutElements;
    /**
     * Adds an element to the survey layout.
     *
     * This method accepts an object with the following layout element properties:
     *
     * - `id`: `String` | `"timerpanel"` | `"progress-buttons"` | `"progress-questions"` | `"progress-pages"` | `"progress-correctquestions"` | `"progress-requiredquestions"` | `"toc-navigation"` | `"navigationbuttons"`\
     * A layout element identifier. You can use possible values to access and relocate or customize predefined layout elements.
     *
     * - `container`: `"header"` | `"footer"` | `"left"` | `"right"` | `"contentTop"` | `"contentBottom"`\
     * A layout container that holds the element. If you want to display the element within multiple containers, set this property to an array of possible values.
     *
     * - `component`: `String`\
     * The name of the component that renders the layout element.
     *
     * - `data`: `any`\
     * Data passed as props to `component`.
     *
     * [View Demo](https://surveyjs.io/form-library/examples/progress-bar-with-percentage/ (linkStyle))
     * @param layoutElement A layout element configuration.
     * @returns The configuration of the previous layout element with the same `id`.
     */
    addLayoutElement(layoutElement: ISurveyLayoutElement): ISurveyLayoutElement;
    removeLayoutElement(layoutElementId: string): ISurveyLayoutElement;
    getContainerContent(container: LayoutElementContainer): any[];
    /**
     * Use this method to dispose survey model properly.
     */
    dispose(): void;
    disposeCallback: () => void;
}
