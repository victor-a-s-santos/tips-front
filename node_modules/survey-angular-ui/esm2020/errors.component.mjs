import { Component, HostBinding, Input, ViewChild } from "@angular/core";
import { TooltipManager } from "survey-core";
import * as i0 from "@angular/core";
import * as i1 from "./survey-string.component";
import * as i2 from "@angular/common";
export class ErrorsComponent {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    ngOnInit() {
        if (this.location == "tooltip") {
            this.tooltipManager = new TooltipManager(this.viewContainerRef.element.nativeElement);
        }
    }
    ngOnDestroy() {
        if (!!this.tooltipManager) {
            this.tooltipManager.dispose();
        }
    }
    get role() {
        return "alert";
    }
    get id() {
        return this.element.id + "_errors";
    }
    get ariaLive() {
        return "polite";
    }
    get class() {
        return this.element.cssError;
    }
}
ErrorsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ErrorsComponent, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
ErrorsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ErrorsComponent, selector: "'[sv-ng-errors]'", inputs: { element: "element", location: "location" }, host: { properties: { "attr.role": "this.role", "id": "this.id", "attr.aria-live": "this.ariaLive", "class": "this.class" } }, viewQueries: [{ propertyName: "errorsContainerRef", first: true, predicate: ["errorsContainer"], descendants: true, static: true }], ngImport: i0, template: "<div *ngFor=\"let error of element.errors;\">\n  <span\n    [class]=\"element.cssClasses ? element.cssClasses.error.icon : 'panel-error-icon'\"\n    aria-hidden=\"true\"\n  ></span>\n  <span [class]=\"element.cssClasses ? element.cssClasses.error.item : 'panel-error-item'\" [model]=\"error.locText\" sv-ng-string>\n  </span>\n</div>", components: [{ type: i1.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ErrorsComponent, decorators: [{
            type: Component,
            args: [{ selector: "'[sv-ng-errors]'", template: "<div *ngFor=\"let error of element.errors;\">\n  <span\n    [class]=\"element.cssClasses ? element.cssClasses.error.icon : 'panel-error-icon'\"\n    aria-hidden=\"true\"\n  ></span>\n  <span [class]=\"element.cssClasses ? element.cssClasses.error.item : 'panel-error-item'\" [model]=\"error.locText\" sv-ng-string>\n  </span>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { element: [{
                type: Input
            }], location: [{
                type: Input
            }], errorsContainerRef: [{
                type: ViewChild,
                args: ["errorsContainer", { static: true }]
            }], role: [{
                type: HostBinding,
                args: ["attr.role"]
            }], id: [{
                type: HostBinding,
                args: ["id"]
            }], ariaLive: [{
                type: HostBinding,
                args: ["attr.aria-live"]
            }], class: [{
                type: HostBinding,
                args: ["class"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMuY29tcG9uZW50LnRzIiwiLi4vLi4vc3JjL2Vycm9ycy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUF1QixXQUFXLEVBQUUsS0FBSyxFQUFxQixTQUFTLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBdUIsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDOzs7O0FBTWxFLE1BQU0sT0FBTyxlQUFlO0lBSzFCLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUMxRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUM5QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkY7SUFDSCxDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFDRCxJQUE4QixJQUFJO1FBQ2hDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxJQUF1QixFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFtQyxRQUFRO1FBQ3pDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxJQUEwQixLQUFLO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQzs7NEdBM0JVLGVBQWU7Z0dBQWYsZUFBZSxrWENQNUIsK1VBT007MkZEQU8sZUFBZTtrQkFKM0IsU0FBUzsrQkFFRSxrQkFBa0I7dUdBR25CLE9BQU87c0JBQWYsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLO2dCQUMwQyxrQkFBa0I7c0JBQWpFLFNBQVM7dUJBQUMsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQWFoQixJQUFJO3NCQUFqQyxXQUFXO3VCQUFDLFdBQVc7Z0JBR0QsRUFBRTtzQkFBeEIsV0FBVzt1QkFBQyxJQUFJO2dCQUdrQixRQUFRO3NCQUExQyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFHSCxLQUFLO3NCQUE5QixXQUFXO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCYXNlLCBTdXJ2ZXlFbGVtZW50LCBUb29sdGlwTWFuYWdlciB9IGZyb20gXCJzdXJ2ZXktY29yZVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6IFwiLi9lcnJvcnMuY29tcG9uZW50Lmh0bWxcIixcbiAgc2VsZWN0b3I6IFwiJ1tzdi1uZy1lcnJvcnNdJ1wiXG59KVxuZXhwb3J0IGNsYXNzIEVycm9yc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgQElucHV0KCkgZWxlbWVudCE6IFN1cnZleUVsZW1lbnQgfCBhbnk7XG4gIEBJbnB1dCgpIGxvY2F0aW9uPzogU3RyaW5nO1xuICBAVmlld0NoaWxkKFwiZXJyb3JzQ29udGFpbmVyXCIsIHsgc3RhdGljOiB0cnVlIH0pIGVycm9yc0NvbnRhaW5lclJlZiE6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICBwcml2YXRlIHRvb2x0aXBNYW5hZ2VyITogVG9vbHRpcE1hbmFnZXI7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge31cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubG9jYXRpb24gPT0gXCJ0b29sdGlwXCIpIHtcbiAgICAgIHRoaXMudG9vbHRpcE1hbmFnZXIgPSBuZXcgVG9vbHRpcE1hbmFnZXIodGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICghIXRoaXMudG9vbHRpcE1hbmFnZXIpIHtcbiAgICAgIHRoaXMudG9vbHRpcE1hbmFnZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxuICBASG9zdEJpbmRpbmcoXCJhdHRyLnJvbGVcIikgZ2V0IHJvbGUgKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiYWxlcnRcIjtcbiAgfVxuICBASG9zdEJpbmRpbmcoXCJpZFwiKSBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LmlkICsgXCJfZXJyb3JzXCI7XG4gIH1cbiAgQEhvc3RCaW5kaW5nKFwiYXR0ci5hcmlhLWxpdmVcIikgZ2V0IGFyaWFMaXZlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwicG9saXRlXCI7XG4gIH1cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3NcIikgZ2V0IGNsYXNzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jc3NFcnJvcjtcbiAgfVxufSIsIjxkaXYgKm5nRm9yPVwibGV0IGVycm9yIG9mIGVsZW1lbnQuZXJyb3JzO1wiPlxuICA8c3BhblxuICAgIFtjbGFzc109XCJlbGVtZW50LmNzc0NsYXNzZXMgPyBlbGVtZW50LmNzc0NsYXNzZXMuZXJyb3IuaWNvbiA6ICdwYW5lbC1lcnJvci1pY29uJ1wiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgPjwvc3Bhbj5cbiAgPHNwYW4gW2NsYXNzXT1cImVsZW1lbnQuY3NzQ2xhc3NlcyA/IGVsZW1lbnQuY3NzQ2xhc3Nlcy5lcnJvci5pdGVtIDogJ3BhbmVsLWVycm9yLWl0ZW0nXCIgW21vZGVsXT1cImVycm9yLmxvY1RleHRcIiBzdi1uZy1zdHJpbmc+XG4gIDwvc3Bhbj5cbjwvZGl2PiJdfQ==