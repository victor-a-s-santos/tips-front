import { Directive, Input } from "@angular/core";
import { AngularComponentFactory } from "../component-factory";
import * as i0 from "@angular/core";
export class DynamicComponentDirective {
    constructor(containerRef, templateRef) {
        this.containerRef = containerRef;
        this.templateRef = templateRef;
    }
    ngOnChanges(changes) {
        const componentChanges = changes["component"];
        if (componentChanges.currentValue.name !== componentChanges.previousValue?.name ||
            (componentChanges.currentValue.name === undefined && componentChanges.previousValue === undefined && !this.componentInstance)) {
            this.createComponent();
        }
        else {
            this.updateComponentData();
        }
    }
    createComponent() {
        this.containerRef.clear();
        if (AngularComponentFactory.Instance.isComponentRegistered(this.component.name)) {
            this.componentInstance = AngularComponentFactory.Instance.create(this.containerRef, this.component.name).instance;
        }
        else if (this.component.default) {
            this.componentInstance = AngularComponentFactory.Instance.create(this.containerRef, this.component.default).instance;
        }
        if (!this.componentInstance) {
            throw new Error(`Can't create component with name: ${this.component.name} and default: ${this.component.default}`);
        }
        else {
            this.componentInstance.contentTempl = this.templateRef;
        }
        this.updateComponentData();
    }
    updateComponentData() {
        const data = this.component.data;
        Object.keys(data).forEach((key) => {
            this.componentInstance[key] = data[key];
        });
    }
}
DynamicComponentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: DynamicComponentDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
DynamicComponentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: DynamicComponentDirective, selector: "[component]", inputs: { component: "component" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: DynamicComponentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[component]"
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }]; }, propDecorators: { component: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvZHluYW1pYy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQTJELE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQVkvRCxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQW9CLFlBQThCLEVBQVUsV0FBaUM7UUFBekUsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO0lBQUksQ0FBQztJQUdsRyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsSUFBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJO1lBQzVFLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksZ0JBQWdCLENBQUMsYUFBYSxLQUFLLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1lBQy9ILElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN4QjthQUFNO1lBQ0wsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBQ0QsZUFBZTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsSUFBRyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5RSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsdUJBQXVCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ25IO2FBQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtZQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsdUJBQXVCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO1NBQ3RIO1FBQ0QsSUFBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksaUJBQWlCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNwSDthQUFNO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3hEO1FBQ0QsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNELG1CQUFtQjtRQUNqQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztzSEFoQ1UseUJBQXlCOzBHQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFKckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7aUlBSVUsU0FBUztzQkFBakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQW5ndWxhckNvbXBvbmVudEZhY3RvcnkgfSBmcm9tIFwiLi4vY29tcG9uZW50LWZhY3RvcnlcIjtcblxuaW50ZXJmYWNlIElEeW5hbWljQ29tcG9uZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuICBkYXRhPzogYW55O1xuICBkZWZhdWx0Pzogc3RyaW5nO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6IFwiW2NvbXBvbmVudF1cIlxufSlcblxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb21wb25lbnREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8dW5rbm93bj4pIHsgfVxuICBASW5wdXQoKSBjb21wb25lbnQhOiBJRHluYW1pY0NvbXBvbmVudDtcbiAgcHJpdmF0ZSBjb21wb25lbnRJbnN0YW5jZTogYW55O1xuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgY29tcG9uZW50Q2hhbmdlcyA9IGNoYW5nZXNbXCJjb21wb25lbnRcIl07XG4gICAgaWYoY29tcG9uZW50Q2hhbmdlcy5jdXJyZW50VmFsdWUubmFtZSAhPT0gY29tcG9uZW50Q2hhbmdlcy5wcmV2aW91c1ZhbHVlPy5uYW1lIHx8XG4gICAgICAoY29tcG9uZW50Q2hhbmdlcy5jdXJyZW50VmFsdWUubmFtZSA9PT0gdW5kZWZpbmVkICYmIGNvbXBvbmVudENoYW5nZXMucHJldmlvdXNWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICF0aGlzLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgdGhpcy5jcmVhdGVDb21wb25lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnREYXRhKCk7XG4gICAgfVxuICB9XG4gIGNyZWF0ZUNvbXBvbmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgIGlmKEFuZ3VsYXJDb21wb25lbnRGYWN0b3J5Lkluc3RhbmNlLmlzQ29tcG9uZW50UmVnaXN0ZXJlZCh0aGlzLmNvbXBvbmVudC5uYW1lKSkge1xuICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IEFuZ3VsYXJDb21wb25lbnRGYWN0b3J5Lkluc3RhbmNlLmNyZWF0ZSh0aGlzLmNvbnRhaW5lclJlZiwgdGhpcy5jb21wb25lbnQubmFtZSkuaW5zdGFuY2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudC5kZWZhdWx0KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gQW5ndWxhckNvbXBvbmVudEZhY3RvcnkuSW5zdGFuY2UuY3JlYXRlKHRoaXMuY29udGFpbmVyUmVmLCB0aGlzLmNvbXBvbmVudC5kZWZhdWx0KS5pbnN0YW5jZTtcbiAgICB9XG4gICAgaWYoIXRoaXMuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY3JlYXRlIGNvbXBvbmVudCB3aXRoIG5hbWU6ICR7dGhpcy5jb21wb25lbnQubmFtZX0gYW5kIGRlZmF1bHQ6ICR7dGhpcy5jb21wb25lbnQuZGVmYXVsdH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZS5jb250ZW50VGVtcGwgPSB0aGlzLnRlbXBsYXRlUmVmO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudERhdGEoKTtcbiAgfVxuICB1cGRhdGVDb21wb25lbnREYXRhKCk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNvbXBvbmVudC5kYXRhO1xuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZVtrZXldID0gZGF0YVtrZXldO1xuICAgIH0pO1xuICB9XG59Il19