import { Component, Input, ViewChild } from "@angular/core";
import { SvgRegistry } from "survey-core";
import { BaseAngular } from "./base-angular";
import { AngularComponentFactory } from "./component-factory";
import * as i0 from "@angular/core";
import * as i1 from "./components/survey-header/survey-header.component";
import * as i2 from "./components/timer-panel/timer-panel.component";
import * as i3 from "./components/action-bar/action-bar.component";
import * as i4 from "./page.component";
import * as i5 from "./components/brand-info/brand-info.component";
import * as i6 from "./components/notifier/notifier.component";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "./utils/dynamic.directive";
export class SurveyContentComponent extends BaseAngular {
    constructor() {
        super(...arguments);
        this.isSurveyUpdated = false;
    }
    getModel() {
        return this.model;
    }
    onModelChanged() {
        if (!!this.previousModel) {
            this.previousModel.destroyResizeObserver();
            this.previousModel.renderCallback = undefined;
        }
        if (!!this.model) {
            this.model.renderCallback = () => {
                this.detectChanges();
            };
        }
        this.isSurveyUpdated = true;
    }
    ngOnInit() {
        super.ngOnInit();
        if (!!this.model && this.model["needRenderIcons"]) {
            SvgRegistry.renderIcons();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (!!this.model) {
            this.model.renderCallback = undefined;
        }
    }
    ngAfterViewInit() {
        this.isSurveyUpdated = true;
    }
    ngAfterViewChecked() {
        if (!!this.model && this.isSurveyUpdated) {
            this.model.afterRenderSurvey(this.rootEl.nativeElement);
        }
        super.ngAfterViewChecked();
    }
}
SurveyContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SurveyContentComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SurveyContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: SurveyContentComponent, selector: "survey-content", inputs: { model: "model" }, viewQueries: [{ propertyName: "rootEl", first: true, predicate: ["surveyContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div #surveyContainer *ngIf=\"!!model\" [class]=\"model.getRootCss()\">\n    <form onsubmit=\"return false;\">\n      <div class=\"sv_custom_header\" [hidden]=\"model.hasLogo\"></div>\n      <div [class]=\"model.css.container\">\n        <div *ngIf=\"model.renderedHasHeader\" [class]=\"model.css.header\" [survey]=\"model\" sv-ng-survey-header></div>\n        <ng-container *ngIf=\"model.isTimerPanelShowingOnTop && !model.isShowStartingPage\">\n          <sv-timer-panel [model]=\"model.timerModel\"></sv-timer-panel>\n        </ng-container>\n        <ng-container *ngIf=\"model.isShowProgressBarOnTop && !model.isShowStartingPage\">\n          <ng-template [component]='{ name: \"sv-progress-\" + this.model.progressBarType, data: { model } }'></ng-template>\n        </ng-container>\n        <div *ngIf=\"model.isShowingPage\" [class]=\"model.bodyCss\" [style.maxWidth]=\"model.renderedWidth\" [id]=\"model.activePage ? model.activePage.id : ''\">\n          <sv-action-bar *ngIf=\"model.isNavigationButtonsShowingOnTop\" [model]=\"model.navigationBar\"></sv-action-bar>\n          <!-- ko if: activePage -->\n            <ng-container *ngIf=\"model.activePage\">\n                <sv-ng-page [model]=\"model.activePage\" [survey]=\"model\"></sv-ng-page>\n            </ng-container>\n            <!-- ko if: activePage.rows.length == 0 && $data.emptyPageTemplate -->\n            <!-- ko template: { name: emptyPageTemplate, data: $data.emptyPageTemplateData || $data } -->\n            <!-- /ko -->\n            <!-- /ko -->\n          <!-- /ko -->\n          <ng-container *ngIf=\"model.isShowProgressBarOnBottom && !model.isShowStartingPage\">\n            <ng-template [component]='{ name: \"sv-progress-\" + this.model.progressBarType, data: { model } }'></ng-template>\n          </ng-container>\n          <sv-action-bar *ngIf=\"model.isNavigationButtonsShowingOnBottom\" [model]=\"model.navigationBar\"></sv-action-bar>  \n        </div>\n        <ng-container *ngIf=\"model.isTimerPanelShowingOnBottom && !model.isShowStartingPage\">\n            <sv-timer-panel [model]=\"model.timerModel\"></sv-timer-panel>\n        </ng-container>\n        <div *ngIf=\"model.state === 'completed' && model.showCompletedPage\" [class]=\"model.completedCss\"\n          [innerHtml]=\"model.processedCompletedHtml\"></div>\n        <div *ngIf=\"model.state === 'completedbefore'\" [class]=\"model.css.body\"\n          [innerHtml]=\"model.processedCompletedBeforeHtml\"></div>\n        <div *ngIf=\"model.state === 'loading'\" [class]=\"model.css.body\" [innerHtml]=\"model.processedLoadingHtml\"></div>\n        <div *ngIf=\"model.state === 'empty'\" [class]=\"model.css.bodyEmpty\">{{model.emptySurveyText}}</div>\n      </div>\n    </form>\n    <sv-brand-info *ngIf=\"model.showBrandInfo\"></sv-brand-info>\n    <sv-notifier [notifier]=\"model.notifier\"></sv-notifier>\n  </div>\n</ng-template>", components: [{ type: i1.SurveyHeaderComponent, selector: "'[sv-ng-survey-header]'", inputs: ["survey"] }, { type: i2.TimerPanelComponent, selector: "sv-timer-panel", inputs: ["model"] }, { type: i3.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: i4.PageComponent, selector: "page, sv-ng-page", inputs: ["model", "survey"] }, { type: i5.BrandInfoComponent, selector: "sv-brand-info" }, { type: i6.NotifierComponent, selector: "sv-notifier", inputs: ["notifier"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i9.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SurveyContentComponent, decorators: [{
            type: Component,
            args: [{ selector: "survey-content", template: "<ng-template #template>\n  <div #surveyContainer *ngIf=\"!!model\" [class]=\"model.getRootCss()\">\n    <form onsubmit=\"return false;\">\n      <div class=\"sv_custom_header\" [hidden]=\"model.hasLogo\"></div>\n      <div [class]=\"model.css.container\">\n        <div *ngIf=\"model.renderedHasHeader\" [class]=\"model.css.header\" [survey]=\"model\" sv-ng-survey-header></div>\n        <ng-container *ngIf=\"model.isTimerPanelShowingOnTop && !model.isShowStartingPage\">\n          <sv-timer-panel [model]=\"model.timerModel\"></sv-timer-panel>\n        </ng-container>\n        <ng-container *ngIf=\"model.isShowProgressBarOnTop && !model.isShowStartingPage\">\n          <ng-template [component]='{ name: \"sv-progress-\" + this.model.progressBarType, data: { model } }'></ng-template>\n        </ng-container>\n        <div *ngIf=\"model.isShowingPage\" [class]=\"model.bodyCss\" [style.maxWidth]=\"model.renderedWidth\" [id]=\"model.activePage ? model.activePage.id : ''\">\n          <sv-action-bar *ngIf=\"model.isNavigationButtonsShowingOnTop\" [model]=\"model.navigationBar\"></sv-action-bar>\n          <!-- ko if: activePage -->\n            <ng-container *ngIf=\"model.activePage\">\n                <sv-ng-page [model]=\"model.activePage\" [survey]=\"model\"></sv-ng-page>\n            </ng-container>\n            <!-- ko if: activePage.rows.length == 0 && $data.emptyPageTemplate -->\n            <!-- ko template: { name: emptyPageTemplate, data: $data.emptyPageTemplateData || $data } -->\n            <!-- /ko -->\n            <!-- /ko -->\n          <!-- /ko -->\n          <ng-container *ngIf=\"model.isShowProgressBarOnBottom && !model.isShowStartingPage\">\n            <ng-template [component]='{ name: \"sv-progress-\" + this.model.progressBarType, data: { model } }'></ng-template>\n          </ng-container>\n          <sv-action-bar *ngIf=\"model.isNavigationButtonsShowingOnBottom\" [model]=\"model.navigationBar\"></sv-action-bar>  \n        </div>\n        <ng-container *ngIf=\"model.isTimerPanelShowingOnBottom && !model.isShowStartingPage\">\n            <sv-timer-panel [model]=\"model.timerModel\"></sv-timer-panel>\n        </ng-container>\n        <div *ngIf=\"model.state === 'completed' && model.showCompletedPage\" [class]=\"model.completedCss\"\n          [innerHtml]=\"model.processedCompletedHtml\"></div>\n        <div *ngIf=\"model.state === 'completedbefore'\" [class]=\"model.css.body\"\n          [innerHtml]=\"model.processedCompletedBeforeHtml\"></div>\n        <div *ngIf=\"model.state === 'loading'\" [class]=\"model.css.body\" [innerHtml]=\"model.processedLoadingHtml\"></div>\n        <div *ngIf=\"model.state === 'empty'\" [class]=\"model.css.bodyEmpty\">{{model.emptySurveyText}}</div>\n      </div>\n    </form>\n    <sv-brand-info *ngIf=\"model.showBrandInfo\"></sv-brand-info>\n    <sv-notifier [notifier]=\"model.notifier\"></sv-notifier>\n  </div>\n</ng-template>" }]
        }], propDecorators: { model: [{
                type: Input
            }], rootEl: [{
                type: ViewChild,
                args: ["surveyContainer", { static: false }]
            }] } });
AngularComponentFactory.Instance.registerComponent("survey", SurveyContentComponent);
//# sourceMappingURL=data:application/json;base64,