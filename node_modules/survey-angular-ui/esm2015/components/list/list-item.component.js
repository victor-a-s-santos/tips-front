import { Component, Input } from "@angular/core";
import { BaseAngular } from "../../base-angular";
import { AngularComponentFactory } from "../../component-factory";
import * as i0 from "@angular/core";
import * as i1 from "../svg-icon/svg-icon.component";
import * as i2 from "../../survey-string.component";
import * as i3 from "../../utils/ng-key2click.directive";
import * as i4 from "../../utils/ng-show.directive";
import * as i5 from "@angular/common";
import * as i6 from "../../utils/dynamic.directive";
export class ListItemComponent extends BaseAngular {
    get elementId() {
        var _a;
        return (_a = this.model) === null || _a === void 0 ? void 0 : _a.elementId;
    }
    get ariaSelected() {
        return this.listModel.isItemSelected(this.model) || "";
    }
    get class() {
        return this.listModel.getItemClass(this.model);
    }
    get paddingLeft() {
        return this.listModel.getItemIndent(this.model);
    }
    click(event) {
        this.listModel.onItemClick(this.model);
        event.stopPropagation();
    }
    pointerdown(event) {
        this.listModel.onPointerDown(event, this.model);
    }
    getModel() {
        return this.model;
    }
    ngAfterViewInit() {
        this.listModel.onLastItemRended(this.model);
    }
}
ListItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ListItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ListItemComponent, selector: "sv-ng-list-item, '[sv-ng-list-item]'", inputs: { element: "element", model: "model", listModel: "listModel" }, usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <li role=\"option\" [key2click] [visible]=\"listModel.isItemVisible(model)\" [class]=\"class\" [attr.id]=\"elementId\" [attr.aria-selected]=\"ariaSelected ? 'true' : 'false'\" (click)=\"click($event)\" (pointerdown)=\"pointerdown($event)\">\n    <ng-container *ngIf=\"model.needSeparator\">\n    <div [class]=\"listModel.cssClasses.itemSeparator\"></div>\n    </ng-container>\n    <div [class]=\"listModel.cssClasses.itemBody\" [style.paddingInlineStart]=\"paddingLeft\">\n    <ng-container *ngIf=\"!model.component\">\n      <svg *ngIf=\"model.iconName\" [class]=\"listModel.cssClasses.itemIcon\" [iconName]=\"model.iconName\" [size]=\"24\"\n        sv-ng-svg-icon></svg>\n      <sv-ng-string [model]=\"model.locTitle\"></sv-ng-string>\n    </ng-container>\n    <ng-container *ngIf=\"model.component\">\n      <ng-template [component]=\"{ name: model.component, data: { model: model } }\"></ng-template>\n    </ng-container>\n    </div>\n  </li>\n</ng-template>", styles: [":host{display:none}\n"], components: [{ type: i1.SvgIconComponent, selector: "'[sv-ng-svg-icon]'", inputs: ["size", "width", "height", "iconName", "partCss", "css", "title"] }, { type: i2.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }], directives: [{ type: i3.Key2ClickDirective, selector: "[key2click]", inputs: ["key2click"] }, { type: i4.VisibleDirective, selector: "[visible]", inputs: ["visible"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ListItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-list-item, '[sv-ng-list-item]'",
                    templateUrl: "./list-item.component.html",
                    styleUrls: ["../../hide-host.scss"],
                }]
        }], propDecorators: { element: [{
                type: Input
            }], model: [{
                type: Input
            }], listModel: [{
                type: Input
            }] } });
AngularComponentFactory.Instance.registerComponent("sv-list-item", ListItemComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2xpc3QvbGlzdC1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2xpc3QvbGlzdC1pdGVtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVoRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7Ozs7O0FBUWxFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUFXO0lBS2hELElBQUksU0FBUzs7UUFDWCxPQUFPLE1BQUMsSUFBSSxDQUFDLEtBQWlCLDBDQUFFLFNBQVMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFDRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUNELEtBQUssQ0FBQyxLQUFVO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBQ0QsV0FBVyxDQUFDLEtBQVU7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7OytHQWhDVSxpQkFBaUI7bUdBQWpCLGlCQUFpQiwyS0NYOUIsKzlCQWdCYzs0RkRMRCxpQkFBaUI7a0JBTjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNDQUFzQztvQkFDaEQsV0FBVyxFQUFFLDRCQUE0QjtvQkFDekMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7aUJBQ3BDOzhCQUdVLE9BQU87c0JBQWYsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSzs7QUFnQ1IsdUJBQXVCLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBMaXN0TW9kZWwsIEFjdGlvbiwgSUFjdGlvbiB9IGZyb20gXCJzdXJ2ZXktY29yZVwiO1xuaW1wb3J0IHsgQmFzZUFuZ3VsYXIgfSBmcm9tIFwiLi4vLi4vYmFzZS1hbmd1bGFyXCI7XG5pbXBvcnQgeyBBbmd1bGFyQ29tcG9uZW50RmFjdG9yeSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnQtZmFjdG9yeVwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwic3YtbmctbGlzdC1pdGVtLCAnW3N2LW5nLWxpc3QtaXRlbV0nXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vbGlzdC1pdGVtLmNvbXBvbmVudC5odG1sXCIsXG4gIHN0eWxlVXJsczogW1wiLi4vLi4vaGlkZS1ob3N0LnNjc3NcIl0sXG59KVxuXG5leHBvcnQgY2xhc3MgTGlzdEl0ZW1Db21wb25lbnQgZXh0ZW5kcyBCYXNlQW5ndWxhciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBlbGVtZW50OiBhbnk7XG4gIEBJbnB1dCgpIG1vZGVsITogQWN0aW9uO1xuICBASW5wdXQoKSBsaXN0TW9kZWwhOiBMaXN0TW9kZWw7XG5cbiAgZ2V0IGVsZW1lbnRJZCgpIHtcbiAgICByZXR1cm4gKHRoaXMubW9kZWwgYXMgSUFjdGlvbik/LmVsZW1lbnRJZDtcbiAgfVxuXG4gIGdldCBhcmlhU2VsZWN0ZWQoKTogYm9vbGVhbiB8IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGlzdE1vZGVsLmlzSXRlbVNlbGVjdGVkKHRoaXMubW9kZWwpIHx8IFwiXCI7XG4gIH1cbiAgZ2V0IGNsYXNzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGlzdE1vZGVsLmdldEl0ZW1DbGFzcyh0aGlzLm1vZGVsKTtcbiAgfVxuICBnZXQgcGFkZGluZ0xlZnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5saXN0TW9kZWwuZ2V0SXRlbUluZGVudCh0aGlzLm1vZGVsKTtcbiAgfVxuICBjbGljayhldmVudDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5saXN0TW9kZWwub25JdGVtQ2xpY2sodGhpcy5tb2RlbCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgcG9pbnRlcmRvd24oZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMubGlzdE1vZGVsLm9uUG9pbnRlckRvd24oZXZlbnQsIHRoaXMubW9kZWwpO1xuICB9XG5cbiAgZ2V0TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5saXN0TW9kZWwub25MYXN0SXRlbVJlbmRlZCh0aGlzLm1vZGVsKTtcbiAgfVxufVxuXG5Bbmd1bGFyQ29tcG9uZW50RmFjdG9yeS5JbnN0YW5jZS5yZWdpc3RlckNvbXBvbmVudChcInN2LWxpc3QtaXRlbVwiLCBMaXN0SXRlbUNvbXBvbmVudCk7IiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgPGxpIHJvbGU9XCJvcHRpb25cIiBba2V5MmNsaWNrXSBbdmlzaWJsZV09XCJsaXN0TW9kZWwuaXNJdGVtVmlzaWJsZShtb2RlbClcIiBbY2xhc3NdPVwiY2xhc3NcIiBbYXR0ci5pZF09XCJlbGVtZW50SWRcIiBbYXR0ci5hcmlhLXNlbGVjdGVkXT1cImFyaWFTZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZSdcIiAoY2xpY2spPVwiY2xpY2soJGV2ZW50KVwiIChwb2ludGVyZG93bik9XCJwb2ludGVyZG93bigkZXZlbnQpXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm1vZGVsLm5lZWRTZXBhcmF0b3JcIj5cbiAgICA8ZGl2IFtjbGFzc109XCJsaXN0TW9kZWwuY3NzQ2xhc3Nlcy5pdGVtU2VwYXJhdG9yXCI+PC9kaXY+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPGRpdiBbY2xhc3NdPVwibGlzdE1vZGVsLmNzc0NsYXNzZXMuaXRlbUJvZHlcIiBbc3R5bGUucGFkZGluZ0lubGluZVN0YXJ0XT1cInBhZGRpbmdMZWZ0XCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFtb2RlbC5jb21wb25lbnRcIj5cbiAgICAgIDxzdmcgKm5nSWY9XCJtb2RlbC5pY29uTmFtZVwiIFtjbGFzc109XCJsaXN0TW9kZWwuY3NzQ2xhc3Nlcy5pdGVtSWNvblwiIFtpY29uTmFtZV09XCJtb2RlbC5pY29uTmFtZVwiIFtzaXplXT1cIjI0XCJcbiAgICAgICAgc3Ytbmctc3ZnLWljb24+PC9zdmc+XG4gICAgICA8c3Ytbmctc3RyaW5nIFttb2RlbF09XCJtb2RlbC5sb2NUaXRsZVwiPjwvc3Ytbmctc3RyaW5nPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJtb2RlbC5jb21wb25lbnRcIj5cbiAgICAgIDxuZy10ZW1wbGF0ZSBbY29tcG9uZW50XT1cInsgbmFtZTogbW9kZWwuY29tcG9uZW50LCBkYXRhOiB7IG1vZGVsOiBtb2RlbCB9IH1cIj48L25nLXRlbXBsYXRlPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICA8L2xpPlxuPC9uZy10ZW1wbGF0ZT4iXX0=