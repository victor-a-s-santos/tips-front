import { Component, Input, ViewChild } from "@angular/core";
import { AngularComponentFactory } from "../../../component-factory";
import { SurveyProgressButtonsModel } from "survey-core";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ProgressButtonsComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hasScroller = false;
        this.updateScroller = undefined;
    }
    createProgressButtonsModel() {
        this.progressButtonsModel = new SurveyProgressButtonsModel(this.model);
    }
    ngOnInit() {
        this.createProgressButtonsModel();
    }
    ngOnChanges(changes) {
        this.createProgressButtonsModel();
    }
    isListElementClickable(index) {
        return this.progressButtonsModel.isListElementClickable(index);
    }
    getListElementCss(index) {
        return this.progressButtonsModel.getListElementCss(index);
    }
    clickListElement(index) {
        this.progressButtonsModel.clickListElement(index);
    }
    getScrollButtonCss(isLeftScroll) {
        return this.progressButtonsModel.getScrollButtonCss(this.hasScroller, isLeftScroll);
    }
    clickScrollButton(isLeftScroll) {
        if (this.progressButtonsListContainer) {
            this.progressButtonsListContainer.nativeElement.scrollLeft += (isLeftScroll ? -1 : 1) * 70;
        }
    }
    ngAfterViewInit() {
        this.progressButtonsModel = new SurveyProgressButtonsModel(this.model);
        this.updateScroller = setInterval(() => {
            var _a;
            if (!!((_a = this.progressButtonsListContainer) === null || _a === void 0 ? void 0 : _a.nativeElement)) {
                const listContainerElement = this.progressButtonsListContainer.nativeElement;
                this.hasScroller = listContainerElement.scrollWidth > listContainerElement.offsetWidth;
                this.changeDetectorRef.detectChanges();
            }
        }, 100);
    }
    ngOnDestroy() {
        if (typeof this.updateScroller !== "undefined") {
            clearInterval(this.updateScroller);
            this.updateScroller = undefined;
        }
    }
}
ProgressButtonsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ProgressButtonsComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ProgressButtonsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: ProgressButtonsComponent, selector: "sv-ng-progress-buttons", inputs: { model: "model" }, viewQueries: [{ propertyName: "progressButtonsListContainer", first: true, predicate: ["progressButtonsListContainer"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div [class]=\"model.css.progressButtonsContainerCenter\">\n  <div [class]=\"model.css.progressButtonsContainer\">\n    <div\n      [class]=\"getScrollButtonCss(true)\"\n      (click)=\"clickScrollButton(true)\"\n      role=\"button\"\n    ></div>\n    <div\n      [class]=\"model.css.progressButtonsListContainer\" #progressButtonsListContainer>\n      <ul [class]=\"model.css.progressButtonsList\">\n        <li\n          *ngFor=\"let page of model.visiblePages; index as index\"\n          [class]=\"getListElementCss(index)\"\n          (click)=\"isListElementClickable(index) ? clickListElement(index) : null\">\n          <div\n            [class]=\"model.css.progressButtonsPageTitle\"\n            [title]=\"page.locNavigationTitle.renderedHtml || page.name\"\n          >\n            {{ page.locNavigationTitle.renderedHtml || page.name }}\n          </div>\n          <div\n            [class]=\"model.css.progressButtonsPageDescription\"\n            [title]=\"page.locNavigationDescription.renderedHtml\"\n          >\n            {{ page.locNavigationDescription.renderedHtml }}\n          </div>\n        </li>\n      </ul>\n    </div>\n    <div\n      [class]=\"getScrollButtonCss(false)\"\n      (click)=\"clickScrollButton(false)\"\n      role=\"button\"\n    ></div>\n  </div>\n</div>", directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ProgressButtonsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-progress-buttons",
                    templateUrl: "./progress.component.html"
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { model: [{
                type: Input
            }], progressButtonsListContainer: [{
                type: ViewChild,
                args: ["progressButtonsListContainer"]
            }] } });
AngularComponentFactory.Instance.registerComponent("sv-progress-buttons", ProgressButtonsComponent);
//# sourceMappingURL=data:application/json;base64,