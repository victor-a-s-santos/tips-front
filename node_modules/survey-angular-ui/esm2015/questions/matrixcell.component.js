import { Component, Input, ViewChild } from "@angular/core";
import { BaseAngular } from "../base-angular";
import { getComponentName } from "../question";
import * as i0 from "@angular/core";
import * as i1 from "../components/matrix-actions/drag-drop-icon/drag-drop-icon";
import * as i2 from "../components/action-bar/action-bar.component";
import * as i3 from "../errors.component";
import * as i4 from "./selectbase-item";
import * as i5 from "../comment-other.component";
import * as i6 from "../survey-string.component";
import * as i7 from "@angular/common";
import * as i8 from "../utils/dynamic.directive";
import * as i9 from "../utils/ng-show.directive";
export class MatrixCellComponent extends BaseAngular {
    constructor() {
        super(...arguments);
        this.isVisible = false;
    }
    getModel() {
        return this.cell.question;
    }
    get row() {
        return this.cell.row;
    }
    get panelComponentName() {
        const panel = this.cell.panel;
        const survey = panel.survey;
        if (!!survey) {
            const name = survey.getElementWrapperComponentName(panel);
            if (!!name) {
                return name;
            }
        }
        return "panel";
    }
    get panelComponentData() {
        const panel = this.cell.panel;
        const survey = panel.survey;
        let data;
        if (!!survey) {
            data = survey.getElementWrapperComponentData(panel);
        }
        return {
            componentName: "panel",
            componentData: {
                model: panel,
                data: data
            }
        };
    }
    getComponentName(element) { return getComponentName(element); }
    getHeaders() {
        return this.cell.headers;
    }
    getCellStyle() {
        if (!!this.cell.width || !!this.cell.minWidth)
            return { width: this.cell.width, minWidth: this.cell.minWidth };
        return null;
    }
    ngAfterViewInit() {
        if (!this.cell.hasQuestion || !this.question || !this.question.survey)
            return;
        var options = {
            cell: this.cell.cell,
            cellQuestion: this.cell.question,
            htmlElement: this.cellContainer.nativeElement,
            row: this.cell.row,
            column: this.cell.cell.column,
        };
        this.question.survey.matrixAfterCellRender(this.question, options);
    }
}
MatrixCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixCellComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
MatrixCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: MatrixCellComponent, selector: "sv-ng-matrix-cell", inputs: { question: "question", cell: "cell" }, viewQueries: [{ propertyName: "cellContainer", first: true, predicate: ["cellContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <td [class]=\"cell.className\" [attr.data-responsive-title]=\"getHeaders()\" [title]=\"cell.getTitle()\" [style]=\"getCellStyle()\" [attr.colspan]=\"cell.colSpans\" #cellContainer>\n    <sv-ng-matrix-drag-drop-icon *ngIf=\"cell.isDragHandlerCell\" [model]=\"$any({ data: { row: row, question: question } })\"></sv-ng-matrix-drag-drop-icon>\n    <sv-action-bar *ngIf=\"cell.isActionsCell\" [model]=\"cell.item.getData()\" [handleClick]=\"false\"></sv-action-bar>\n    <ng-container *ngIf=\"cell.hasPanel\">\n      <ng-template [component]=\"{ name: panelComponentName, data: panelComponentData }\"></ng-template>\n    </ng-container>\n    <div *ngIf=\"cell.hasQuestion\" [class]=\"question.cssClasses.cellQuestionWrapper\" [visible]=\"cell.question.isVisible\">\n      <div *ngIf=\"cell.showErrorOnTop && cell.question.hasVisibleErrors\" [element]=\"cell.question\" [location]=\"'top'\" sv-ng-errors></div>\n      <ng-container *ngIf=\"!cell.isChoice && cell.question.isDefaultRendering()\">\n          <ng-template [component]=\"{ name: question.getCellWrapperComponentName(cell.cell), data: { componentData: question.getCellWrapperComponentData(cell.cell)} }\">\n            <ng-template  [component]=\"{ name: getComponentName(cell.question), data: { model: cell.question } }\"></ng-template>\n          </ng-template>\n      </ng-container>\n      <ng-template *ngIf=\"!cell.isChoice && !cell.question.isDefaultRendering()\" [component]=\"{ name: cell.question.getComponentName(), data: { model: cell.question } }\">\n      </ng-template>\n      <sv-ng-selebase-item\n        *ngIf=\"cell.isItemChoice\"\n        [showLabel]=\"false\"\n        [inputType]=\"cell.isCheckbox ? 'checkbox': 'radio'\"\n        [question]=\"cell.question\"\n        [model]=\"cell.item\"\n      ></sv-ng-selebase-item>\n      <div *ngIf=\"cell.isOtherChoice\" [class]=\"cell.question.getCommentAreaCss(true)\" [question]=\"cell.question\" sv-ng-comment-other></div>\n      <div *ngIf=\"cell.showErrorOnBottom && cell.question.hasVisibleErrors\" [element]=\"cell.question\" [location]=\"'top'\" sv-ng-errors></div>\n      <div *ngIf=\"cell.question.isErrorsModeTooltip && cell.question.hasVisibleErrors\" [element]=\"cell.question\" [location]=\"'tooltip'\" sv-ng-errors></div>\n    </div>\n    <ng-container *ngIf=\"cell.hasTitle\">\n      <ng-template [component]=\"{ name: question.getCellWrapperComponentName($any(cell)), data: { componentData: question.getCellWrapperComponentData($any(cell))} }\">\n        <sv-ng-string [model]=\"cell.locTitle\"></sv-ng-string>\n        <span *ngIf=\"!!cell.requiredText\" [class]=\"question.cssClasses.cellRequiredText\">{{ cell.requiredText }}</span>  \n      </ng-template>\n    </ng-container>\n</td>\n</ng-template>", styles: [":host { display: none; }"], components: [{ type: i1.MatrixDynamicDragDropIconComponent, selector: "sv-ng-matrix-drag-drop-icon", inputs: ["model"] }, { type: i2.ActionBarComponent, selector: "sv-action-bar, sv-ng-action-bar", inputs: ["model", "handleClick"] }, { type: i3.ErrorsComponent, selector: "'[sv-ng-errors]'", inputs: ["element", "location"] }, { type: i4.SelectBaseItemComponent, selector: "['sv-ng-selectbase-item'], sv-ng-selebase-item", inputs: ["question", "model", "inputType", "showLabel"] }, { type: i5.SurveyCommentOtherComponent, selector: "sv-ng-comment-other, '[sv-ng-comment-other]'", inputs: ["question"] }, { type: i6.SurveyStringComponent, selector: "sv-ng-string, '[sv-ng-string]'", inputs: ["model"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }, { type: i9.VisibleDirective, selector: "[visible]", inputs: ["visible"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: MatrixCellComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-matrix-cell",
                    templateUrl: "./matrixcell.component.html",
                    styles: [":host { display: none; }"]
                }]
        }], propDecorators: { question: [{
                type: Input
            }], cell: [{
                type: Input
            }], cellContainer: [{
                type: ViewChild,
                args: ["cellContainer"]
            }] } });
//# sourceMappingURL=data:application/json;base64,